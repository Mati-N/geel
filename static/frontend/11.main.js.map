{"version":3,"sources":["webpack:///./src/components/layout/Error.js","webpack:///./src/components/post/Post.js"],"names":["Error","error","componentStack","resetErrorBoundary","role","className","onClick","PostItem","lazy","Comments","Post","id","match","params","useQuery","GET_POST","variables","loading","data","fetchMore","refetch","useState","spin","setSpin","size","node","posts","edges","console","log","FallbackComponent","key","likes","likers","length","comments","commentSet","user_id","user","username","show_comment","postComments","onEnter","query","cursor","pageInfo","endCursor","updateQuery","previousResult","fetchMoreResult","hasNextPage","newEdges","post","__typename"],"mappings":"oOAceA,MAZf,YAA8D,EAA7CC,MAA6C,IAAtCC,EAAsC,EAAtCA,eAAgBC,EAAsB,EAAtBA,mBACtC,OACE,yBAAKC,KAAK,SACR,oDACA,6BAAMF,GACN,4BAAQG,UAAU,eAAeC,QAASH,GAA1C,e,ikBCCN,IAAMI,EAAWC,gBAAK,kBAAM,iCACtBC,EAAWD,gBAAK,kBAAM,kCAwEbE,UAtEF,SAAC,GAIR,IAFQC,EAER,EAHJC,MACEC,OAAUF,GAER,EACiDG,mBAASC,IAAU,CACtEC,UAAW,CAAEL,QADPM,EADJ,EACIA,QAASC,EADb,EACaA,KAAaC,GAD1B,EACmBlB,MADnB,EAC0BkB,WAD1B,KACqCC,QAGjBC,oBAAS,IAJ7B,WAIGC,EAJH,KAISC,EAJT,KAoCJ,GAAIN,IAAYC,EACd,OAAO,kBAAC,iBAAD,CAASM,KAAM,KArCpB,IAuCIC,EAASP,EAAKQ,MAAMC,MAAM,GAA1BF,KAGR,OADAG,QAAQC,IAAIX,GAEV,kBAAC,gBAAD,CAAeY,kBAAmB9B,GAChC,yBAAKK,UAAU,QACb,kBAACE,EAAD,KACEwB,IAAKN,EAAKd,GACVqB,MAAOP,EAAKQ,OAAOC,OACnBC,SAAUV,EAAKW,WAAWF,OAC1BG,QAASZ,EAAKa,KAAK3B,GACnB4B,SAAUd,EAAKa,KAAKC,SACpBC,cAAc,GACVf,IAEN,kBAAChB,EAAD,CAAU0B,SAAUjB,EAAKuB,aAAad,QAEtC,kBAAC,IAAD,CAAUe,QAlDH,WACXvB,EAAU,CACRwB,MAAO5B,IACPC,UAAW,CAAE4B,OAAQ1B,EAAKuB,aAAaI,SAASC,UAAWnC,MAC3DoC,YAAa,SAACC,EAAD,GAAyC,IAAtBC,EAAsB,EAAtBA,gBAE9B,GADA1B,GAAQ,IACHyB,EAAeP,aAAaI,SAASK,YAExC,OADA3B,GAAQ,GACDyB,EAET,IAAMG,EAAWF,EAAgBR,aAAad,MACxCkB,EAAWI,EAAgBR,aAAaI,SAE9C,OAAOM,EAASjB,OACZ,CACEkB,KAAM,EAAF,KACCJ,EAAeI,MADhB,IAEFX,aAAc,CACZY,WAAYL,EAAeP,aAAaY,WACxC1B,MAAO,GAAF,WAAMqB,EAAeP,aAAad,OAAlC,IAA4CwB,IACjDN,eAING,KAGRzB,GAAQ,KAwBF,yBAAKlB,UAAU,YACXY,GAAWK,IAAS,kBAAC,iBAAD,CAASE,KAAM","file":"11.main.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Error({ error, componentStack, resetErrorBoundary }) {\r\n  return (\r\n    <div role=\"alert\">\r\n      <p>Something went wrong:</p>\r\n      <pre>{componentStack}</pre>\r\n      <button className=\"btn-teal btn\" onClick={resetErrorBoundary}>\r\n        Try again\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Error;\r\n","import React, { useState, lazy } from \"react\";\r\nimport { Waypoint } from \"react-waypoint\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { GET_POST } from \"../../Queries\";\r\nimport { ImpulseSpinner as Spinner } from \"react-spinners-kit\";\r\nimport { ErrorBoundary } from \"react-error-boundary\";\r\nimport Error from \"../layout/Error\";\r\n\r\nconst PostItem = lazy(() => import(\"./PostItem\"));\r\nconst Comments = lazy(() => import(\"./Comments\"));\r\n\r\nconst Post = ({\r\n  match: {\r\n    params: { id },\r\n  },\r\n}) => {\r\n  const { loading, data, error, fetchMore, refetch } = useQuery(GET_POST, {\r\n    variables: { id },\r\n  });\r\n  const [spin, setSpin] = useState(true);\r\n\r\n  const more = () => {\r\n    fetchMore({\r\n      query: GET_POST,\r\n      variables: { cursor: data.postComments.pageInfo.endCursor, id },\r\n      updateQuery: (previousResult, { fetchMoreResult }) => {\r\n        setSpin(true);\r\n        if (!previousResult.postComments.pageInfo.hasNextPage) {\r\n          setSpin(false);\r\n          return previousResult;\r\n        }\r\n        const newEdges = fetchMoreResult.postComments.edges;\r\n        const pageInfo = fetchMoreResult.postComments.pageInfo;\r\n\r\n        return newEdges.length\r\n          ? {\r\n              post: {\r\n                ...previousResult.post,\r\n                postComments: {\r\n                  __typename: previousResult.postComments.__typename,\r\n                  edges: [...previousResult.postComments.edges, ...newEdges],\r\n                  pageInfo,\r\n                },\r\n              },\r\n            }\r\n          : previousResult;\r\n      },\r\n    });\r\n    setSpin(false);\r\n  };\r\n\r\n  if (loading && !data) {\r\n    return <Spinner size={40} />;\r\n  }\r\n  const { node } = data.posts.edges[0];\r\n\r\n  console.log(data);\r\n  return (\r\n    <ErrorBoundary FallbackComponent={Error}>\r\n      <div className=\"main\">\r\n        <PostItem\r\n          key={node.id}\r\n          likes={node.likers.length}\r\n          comments={node.commentSet.length}\r\n          user_id={node.user.id}\r\n          username={node.user.username}\r\n          show_comment={true}\r\n          {...node}\r\n        />\r\n        <Comments comments={data.postComments.edges} />\r\n\r\n        <Waypoint onEnter={more}>\r\n          <div className=\"spinner\">\r\n            {(loading || spin) && <Spinner size={40} />}\r\n          </div>\r\n        </Waypoint>\r\n      </div>\r\n    </ErrorBoundary>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n"],"sourceRoot":""}