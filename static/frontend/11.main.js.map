{"version":3,"sources":["webpack:///./src/components/post/Post.js"],"names":["PostItem","lazy","Post","id","match","params","useQuery","GET_POST","variables","loading","data","fetchMore","error","refetch","useState","spin","setSpin","size","node","posts","edges","FallbackComponent","Error","className","key","likes","likers","length","comments","commentSet","user_id","user","username","postComments","map","Link","to","onEnter","query","cursor","post","pageInfo","endCursor","updateQuery","previousResult","fetchMoreResult","hasNextPage","newEdges","__typename"],"mappings":"8yBAQA,IAAMA,EAAWC,gBAAK,kBAAM,iCA8EbC,UA5EF,SAAC,GAIR,IAFQC,EAER,EAHJC,MACEC,OAAUF,GAER,EACiDG,mBAASC,IAAU,CACtEC,UAAW,CAAEL,QADPM,EADJ,EACIA,QAASC,EADb,EACaA,KAAaC,GAD1B,EACmBC,MADnB,EAC0BD,WAD1B,KACqCE,QAGjBC,oBAAS,IAJ7B,WAIGC,EAJH,KAISC,EAJT,KAmCJ,GAAIP,IAAYC,EACd,OAAO,kBAAC,iBAAD,CAASO,KAAM,KApCpB,IAsCIC,EAASR,EAAKS,MAAMC,MAAM,GAA1BF,KAER,OACE,kBAAC,gBAAD,CAAeG,kBAAmBC,KAChC,kBAAC,WAAD,CAAUD,kBAAmBC,KAC3B,yBAAKC,UAAU,QACb,kBAACvB,EAAD,KACEwB,IAAKN,EAAKf,GACVsB,MAAOP,EAAKQ,OAAOC,OACnBC,SAAUV,EAAKW,WAAWF,OAC1BG,QAASZ,EAAKa,KAAK5B,GACnB6B,SAAUd,EAAKa,KAAKC,UAChBd,IAELR,EAAKuB,aAAab,MAAMc,KAAI,gBAAGhB,EAAH,EAAGA,KAAH,OAC3B,oCACE,8BACE,oDACA,kBAACiB,KAAD,CAAMC,GAAE,eAAUlB,EAAKa,KAAK5B,OAE9B,gDAGJ,kBAAC,IAAD,CAAUkC,QAvDL,WACX1B,EAAU,CACR2B,MAAO/B,IACPC,UAAW,CAAE+B,OAAQ7B,EAAK8B,KAAKP,aAAaQ,SAASC,WACrDC,YAAa,SAACC,EAAD,GAAyC,IAAtBC,EAAsB,EAAtBA,gBAE9B,GADA7B,GAAQ,IACH4B,EAAeJ,KAAKP,aAAaQ,SAASK,YAE7C,OADA9B,GAAQ,GACD4B,EAET,IAAMG,EAAWF,EAAgBL,KAAKP,aAAab,MAC7CqB,EAAWI,EAAgBL,KAAKP,aAAaQ,SAEnD,OAAOM,EAASpB,OACZ,CACEa,KAAM,EAAF,KACCI,EAAeJ,MADhB,IAEFP,aAAc,CACZe,WAAYJ,EAAeJ,KAAKP,aAAae,WAC7C5B,MAAO,GAAF,WAAMwB,EAAeJ,KAAKrB,MAAMC,OAAhC,IAA0C2B,IAC/CN,eAING,OAgCA,yBAAKrB,UAAU,YACXd,GAAWM,IAAS,kBAAC,iBAAD,CAASE,KAAM","file":"11.main.js","sourcesContent":["import React, { useState, lazy, Suspense } from \"react\";\r\nimport { Waypoint } from \"react-waypoint\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { GET_POST } from \"../../Queries\";\r\nimport { ImpulseSpinner as Spinner } from \"react-spinners-kit\";\r\nimport { ErrorBoundary } from \"react-error-boundary\";\r\nimport Error from \"../layout/Error\";\r\n\r\nconst PostItem = lazy(() => import(\"./PostItem\"));\r\n\r\nconst Post = ({\r\n  match: {\r\n    params: { id },\r\n  },\r\n}) => {\r\n  const { loading, data, error, fetchMore, refetch } = useQuery(GET_POST, {\r\n    variables: { id },\r\n  });\r\n  const [spin, setSpin] = useState(true);\r\n\r\n  const more = () => {\r\n    fetchMore({\r\n      query: GET_POST,\r\n      variables: { cursor: data.post.postComments.pageInfo.endCursor },\r\n      updateQuery: (previousResult, { fetchMoreResult }) => {\r\n        setSpin(true);\r\n        if (!previousResult.post.postComments.pageInfo.hasNextPage) {\r\n          setSpin(false);\r\n          return previousResult;\r\n        }\r\n        const newEdges = fetchMoreResult.post.postComments.edges;\r\n        const pageInfo = fetchMoreResult.post.postComments.pageInfo;\r\n\r\n        return newEdges.length\r\n          ? {\r\n              post: {\r\n                ...previousResult.post,\r\n                postComments: {\r\n                  __typename: previousResult.post.postComments.__typename,\r\n                  edges: [...previousResult.post.posts.edges, ...newEdges],\r\n                  pageInfo,\r\n                },\r\n              },\r\n            }\r\n          : previousResult;\r\n      },\r\n    });\r\n  };\r\n\r\n  if (loading && !data) {\r\n    return <Spinner size={40} />;\r\n  }\r\n  const { node } = data.posts.edges[0];\r\n\r\n  return (\r\n    <ErrorBoundary FallbackComponent={Error}>\r\n      <Suspense FallbackComponent={Error}>\r\n        <div className=\"main\">\r\n          <PostItem\r\n            key={node.id}\r\n            likes={node.likers.length}\r\n            comments={node.commentSet.length}\r\n            user_id={node.user.id}\r\n            username={node.user.username}\r\n            {...node}\r\n          />\r\n          {data.postComments.edges.map(({ node }) => (\r\n            <>\r\n              <span>\r\n                <span>node.user.username</span>\r\n                <Link to={`post/${node.user.id}`} />\r\n              </span>\r\n              <h1>node.content</h1>\r\n            </>\r\n          ))}\r\n          <Waypoint onEnter={more}>\r\n            <div className=\"spinner\">\r\n              {(loading || spin) && <Spinner size={40} />}\r\n            </div>\r\n          </Waypoint>\r\n        </div>\r\n      </Suspense>\r\n    </ErrorBoundary>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n"],"sourceRoot":""}