{"version":3,"sources":["webpack:///./src/components/pages/Home.js"],"names":["Offline","lazy","Home","useQuery","GET_POSTS","loading","data","error","fetchMore","refetch","useState","spin","setSpin","className","size","style","margin","onClick","posts","edges","map","node","id","onEnter","query","variables","cursor","pageInfo","endCursor","updateQuery","previousResult","fetchMoreResult","hasNextPage","newEdges","length","__typename"],"mappings":";;;;knBAMMA,EAAUC,gBAAK,kBAAM,gGA+EZC,UA5Ef,WAAgB,MACuCC,mBAASC,aAAtDC,EADM,EACNA,QAASC,EADH,EACGA,KAAMC,EADT,EACSA,MAAOC,EADhB,EACgBA,UAAWC,EAD3B,EAC2BA,QAD3B,EAEUC,oBAAS,GAFnB,WAEPC,EAFO,KAEDC,EAFC,KAId,OAAIP,EAEA,yBAAKQ,UAAU,WACb,kBAAC,iBAAD,CACEC,KAAM,GACNC,MAAO,CACLC,OAAQ,WAMdT,EAEA,oCACE,kBAACP,EAAD,MACA,4BAAQa,UAAU,eAAeI,QAASR,GAA1C,YAkCJ,oCACE,yBAAKI,UAAU,QACZP,EAAKY,MAAMC,MAAMC,KAAI,gBAAGC,EAAH,EAAGA,KAAH,MACnB,GASC,oCAAGA,EAAKC,QAEZ,kBAAC,WAAD,CAAUC,QAzCH,WACXf,EAAU,CACRgB,MAAOpB,YACPqB,UAAW,CAAEC,OAAQpB,EAAKY,MAAMS,SAASC,WACzCC,YAAa,SAACC,EAAD,GAAyC,IAAtBC,EAAsB,EAAtBA,gBAE9B,GADAnB,GAAQ,IACHkB,EAAeZ,MAAMS,SAASK,YAEjC,OADApB,GAAQ,GACDkB,EAET,IAAMG,EAAWF,EAAgBb,MAAMC,MACjCQ,EAAWI,EAAgBb,MAAMS,SAEvC,OAAOM,EAASC,OACZ,CACEhB,MAAO,CACLiB,WAAYL,EAAeZ,MAAMiB,WACjChB,MAAO,GAAF,WAAMW,EAAeZ,MAAMC,OAA3B,IAAqCc,IAC1CN,aAGJG,OAqBF,yBAAKjB,UAAU,WAAWF,GAAQ,kBAAC,iBAAD,CAASG,KAAM","file":"11.main.js","sourcesContent":["import React, { useState, lazy } from \"react\";\r\nimport { GET_POSTS } from \"../../Queries\";\r\nimport { useQuery } from \"@apollo/client\";\r\n\r\nimport { Waypoint } from \"react-waypoint\";\r\nimport { ImpulseSpinner as Spinner } from \"react-spinners-kit\";\r\nconst Offline = lazy(() => import(\"./Offline\"));\r\nconst PostItem = lazy(() => import(\"../post/PostItem\"));\r\n\r\nfunction Home() {\r\n  const { loading, data, error, fetchMore, refetch } = useQuery(GET_POSTS);\r\n  const [spin, setSpin] = useState(false);\r\n\r\n  if (loading)\r\n    return (\r\n      <div className=\"spinner\">\r\n        <Spinner\r\n          size={50}\r\n          style={{\r\n            margin: \"auto\",\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n\r\n  if (error) {\r\n    return (\r\n      <>\r\n        <Offline />\r\n        <button className=\"btn btn-teal\" onClick={refetch}>\r\n          Refresh\r\n        </button>\r\n      </>\r\n    );\r\n  }\r\n\r\n  const more = () => {\r\n    fetchMore({\r\n      query: GET_POSTS,\r\n      variables: { cursor: data.posts.pageInfo.endCursor },\r\n      updateQuery: (previousResult, { fetchMoreResult }) => {\r\n        setSpin(true);\r\n        if (!previousResult.posts.pageInfo.hasNextPage) {\r\n          setSpin(false);\r\n          return previousResult;\r\n        }\r\n        const newEdges = fetchMoreResult.posts.edges;\r\n        const pageInfo = fetchMoreResult.posts.pageInfo;\r\n\r\n        return newEdges.length\r\n          ? {\r\n              posts: {\r\n                __typename: previousResult.posts.__typename,\r\n                edges: [...previousResult.posts.edges, ...newEdges],\r\n                pageInfo,\r\n              },\r\n            }\r\n          : previousResult;\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"main\">\r\n        {data.posts.edges.map(({ node }) =>\r\n          ({\r\n            /*<PostItem\r\n            key={node.id}\r\n            {...node}\r\n            likes={node.likers.length}\r\n            comments={node.commentSet.length}\r\n            user_id={node.user.id}\r\n            username={node.user.username}\r\n          />*/\r\n          }(<>{node.id}</>))\r\n        )}\r\n        <Waypoint onEnter={more}>\r\n          <div className=\"spinner\">{spin && <Spinner size={40} />}</div>\r\n        </Waypoint>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n"],"sourceRoot":""}