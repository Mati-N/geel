{"version":3,"sources":["webpack:///./src/components/layout/Error.js","webpack:///./src/components/post/Post.js"],"names":["Error","error","componentStack","resetErrorBoundary","role","className","onClick","PostItem","lazy","Post","id","match","params","useQuery","GET_POST","variables","loading","data","fetchMore","refetch","useState","spin","setSpin","size","node","posts","edges","fallback","FallbackComponent","key","likes","likers","length","comments","commentSet","user_id","user","username","postComments","map","Link","to","onEnter","query","cursor","post","pageInfo","endCursor","updateQuery","previousResult","fetchMoreResult","hasNextPage","newEdges","__typename"],"mappings":"oOAceA,MAZf,YAA8D,EAA7CC,MAA6C,IAAtCC,EAAsC,EAAtCA,eAAgBC,EAAsB,EAAtBA,mBACtC,OACE,yBAAKC,KAAK,SACR,oDACA,6BAAMF,GACN,4BAAQG,UAAU,eAAeC,QAASH,GAA1C,e,ikBCCN,IAAMI,EAAWC,gBAAK,kBAAM,iCA8EbC,UA5EF,SAAC,GAIR,IAFQC,EAER,EAHJC,MACEC,OAAUF,GAER,EACiDG,mBAASC,IAAU,CACtEC,UAAW,CAAEL,QADPM,EADJ,EACIA,QAASC,EADb,EACaA,KAAaC,GAD1B,EACmBjB,MADnB,EAC0BiB,WAD1B,KACqCC,QAGjBC,oBAAS,IAJ7B,WAIGC,EAJH,KAISC,EAJT,KAmCJ,GAAIN,IAAYC,EACd,OAAO,kBAAC,iBAAD,CAASM,KAAM,KApCpB,IAsCIC,EAASP,EAAKQ,MAAMC,MAAM,GAA1BF,KAER,OACE,kBAAC,WAAD,CAAUG,SAAU3B,GAClB,kBAAC,gBAAD,CAAe4B,kBAAmB5B,GAChC,yBAAKK,UAAU,QACb,kBAACE,EAAD,KACEsB,IAAKL,EAAKd,GACVoB,MAAON,EAAKO,OAAOC,OACnBC,SAAUT,EAAKU,WAAWF,OAC1BG,QAASX,EAAKY,KAAK1B,GACnB2B,SAAUb,EAAKY,KAAKC,UAChBb,IAELP,EAAKqB,aAAaZ,MAAMa,KAAI,gBAAGf,EAAH,EAAGA,KAAH,OAC3B,oCACE,8BACE,oDACA,kBAACgB,KAAD,CAAMC,GAAE,eAAUjB,EAAKY,KAAK1B,OAE9B,gDAGJ,kBAAC,IAAD,CAAUgC,QAvDL,WACXxB,EAAU,CACRyB,MAAO7B,IACPC,UAAW,CAAE6B,OAAQ3B,EAAK4B,KAAKP,aAAaQ,SAASC,WACrDC,YAAa,SAACC,EAAD,GAAyC,IAAtBC,EAAsB,EAAtBA,gBAE9B,GADA5B,GAAQ,IACH2B,EAAeJ,KAAKP,aAAaQ,SAASK,YAE7C,OADA7B,GAAQ,GACD2B,EAET,IAAMG,EAAWF,EAAgBL,KAAKP,aAAaZ,MAC7CoB,EAAWI,EAAgBL,KAAKP,aAAaQ,SAEnD,OAAOM,EAASpB,OACZ,CACEa,KAAM,EAAF,KACCI,EAAeJ,MADhB,IAEFP,aAAc,CACZe,WAAYJ,EAAeJ,KAAKP,aAAae,WAC7C3B,MAAO,GAAF,WAAMuB,EAAeJ,KAAKpB,MAAMC,OAAhC,IAA0C0B,IAC/CN,eAING,OAgCA,yBAAK5C,UAAU,YACXW,GAAWK,IAAS,kBAAC,iBAAD,CAASE,KAAM","file":"11.main.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Error({ error, componentStack, resetErrorBoundary }) {\r\n  return (\r\n    <div role=\"alert\">\r\n      <p>Something went wrong:</p>\r\n      <pre>{componentStack}</pre>\r\n      <button className=\"btn-teal btn\" onClick={resetErrorBoundary}>\r\n        Try again\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Error;\r\n","import React, { useState, lazy, Suspense } from \"react\";\r\nimport { Waypoint } from \"react-waypoint\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { GET_POST } from \"../../Queries\";\r\nimport { ImpulseSpinner as Spinner } from \"react-spinners-kit\";\r\nimport { ErrorBoundary } from \"react-error-boundary\";\r\nimport Error from \"../layout/Error\";\r\n\r\nconst PostItem = lazy(() => import(\"./PostItem\"));\r\n\r\nconst Post = ({\r\n  match: {\r\n    params: { id },\r\n  },\r\n}) => {\r\n  const { loading, data, error, fetchMore, refetch } = useQuery(GET_POST, {\r\n    variables: { id },\r\n  });\r\n  const [spin, setSpin] = useState(true);\r\n\r\n  const more = () => {\r\n    fetchMore({\r\n      query: GET_POST,\r\n      variables: { cursor: data.post.postComments.pageInfo.endCursor },\r\n      updateQuery: (previousResult, { fetchMoreResult }) => {\r\n        setSpin(true);\r\n        if (!previousResult.post.postComments.pageInfo.hasNextPage) {\r\n          setSpin(false);\r\n          return previousResult;\r\n        }\r\n        const newEdges = fetchMoreResult.post.postComments.edges;\r\n        const pageInfo = fetchMoreResult.post.postComments.pageInfo;\r\n\r\n        return newEdges.length\r\n          ? {\r\n              post: {\r\n                ...previousResult.post,\r\n                postComments: {\r\n                  __typename: previousResult.post.postComments.__typename,\r\n                  edges: [...previousResult.post.posts.edges, ...newEdges],\r\n                  pageInfo,\r\n                },\r\n              },\r\n            }\r\n          : previousResult;\r\n      },\r\n    });\r\n  };\r\n\r\n  if (loading && !data) {\r\n    return <Spinner size={40} />;\r\n  }\r\n  const { node } = data.posts.edges[0];\r\n\r\n  return (\r\n    <Suspense fallback={Error}>\r\n      <ErrorBoundary FallbackComponent={Error}>\r\n        <div className=\"main\">\r\n          <PostItem\r\n            key={node.id}\r\n            likes={node.likers.length}\r\n            comments={node.commentSet.length}\r\n            user_id={node.user.id}\r\n            username={node.user.username}\r\n            {...node}\r\n          />\r\n          {data.postComments.edges.map(({ node }) => (\r\n            <>\r\n              <span>\r\n                <span>node.user.username</span>\r\n                <Link to={`post/${node.user.id}`} />\r\n              </span>\r\n              <h1>node.content</h1>\r\n            </>\r\n          ))}\r\n          <Waypoint onEnter={more}>\r\n            <div className=\"spinner\">\r\n              {(loading || spin) && <Spinner size={40} />}\r\n            </div>\r\n          </Waypoint>\r\n        </div>\r\n      </ErrorBoundary>\r\n    </Suspense>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n"],"sourceRoot":""}