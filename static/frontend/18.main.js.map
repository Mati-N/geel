{"version":3,"sources":["webpack:///./src/components/Routing/PrivateRoute.js","webpack:///./src/components/Routing/AuthenticationRoute.js","webpack:///./src/components/Routing/Routes.js"],"names":["PrivateRoute","Component","component","rest","auth","useContext","AuthContext","isAuthenticated","loading","render","props","className","size","to","AuthenticationRoute","style","Post","lazy","Home","Account","NewPost","Login","Register","NotFound","User","Routes","loggedIn","location","useLocation","transitions","useTransition","pathname","from","opacity","transform","enter","leave","config","stiff","useEffect","Fragment","map","item","key","div","fallback","margin","exact","path"],"mappings":"gLA4BeA,EAvBM,SAAC,GAA4C,IAA/BC,EAA+B,EAA1CC,UAA+BC,GAAW,EAApBC,KAAoB,+BAC3BC,qBAAWC,KAAxCC,EADwD,EACxDA,gBAAiBC,EADuC,EACvCA,QAEzB,OACE,kBAAC,IAAD,OACML,EADN,CAEEM,OAAQ,SAACC,GACP,OAAIF,GAA8B,MAAnBD,EAEX,yBAAKI,UAAU,WACb,kBAAC,iBAAD,CAASC,KAAM,MAGXL,EAGD,kBAACN,EAAcS,GAFf,kBAAC,IAAD,CAAUG,GAAG,gBCSfC,EAvBa,SAAC,GAA4C,IAA/Bb,EAA+B,EAA1CC,UAA+BC,GAAW,EAApBC,KAAoB,+BAClCC,qBAAWC,KAAxCC,EAD+D,EAC/DA,gBAAiBC,EAD8C,EAC9CA,QAEzB,OACE,kBAAC,IAAD,OACML,EADN,CAEEM,OAAQ,SAACC,GACP,OAAIF,GAA8B,MAAnBD,EAEX,yBAAKI,UAAU,WACb,kBAAC,iBAAD,CAASC,KAAM,GAAIG,MAAO,MAGvBR,EACA,kBAAC,IAAD,CAAUM,GAAG,MAEb,kBAACZ,EAAcS,Q,QCb1BM,EAAOC,gBAAK,kBAAM,wDAClBC,EAAOD,gBAAK,kBAAM,iCAClBE,EAAUF,gBAAK,kBAAM,iCACrBG,EAAUH,gBAAK,kBAAM,iCACrBI,EAAQJ,gBAAK,kBAAM,iCACnBK,EAAWL,gBAAK,kBAAM,iCACtBM,EAAWN,gBAAK,kBAAM,kCACtBO,EAAOP,gBAAK,kBAAM,iCAgETQ,UA9DA,WAAM,IACXC,EAAarB,qBAAWC,KAAxBoB,SACFC,EAAWC,cACXC,EAAcC,YAAcH,GAAU,SAACA,GAAD,OAAcA,EAASI,WAAU,CAC3EC,KAAM,CACJC,QAAS,EACTC,UAAW,gCAEbC,MAAO,CACLF,QAAS,EACTC,UAAW,2BAEbE,MAAO,CACLH,QAAS,EACTC,UAAW,8BAEbG,OAAQA,IAAOC,QAMjB,OAHAC,qBAAU,WACRb,MACC,IAED,kBAAC,IAAMc,SAAP,KACGX,EAAYY,KAAI,gBAAGC,EAAH,EAAGA,KAAMhC,EAAT,EAASA,MAAOiC,EAAhB,EAAgBA,IAAhB,OACf,kBAAC,IAASC,IAAV,CAAcD,IAAG,UAAKA,EAAL,QAAgB5B,MAAOL,EAAOC,UAAU,aACvD,kBAAC,WAAD,CACEkC,SACE,yBAAKlC,UAAU,QACb,yBAAKA,UAAU,WACb,kBAAC,iBAAD,CACEC,KAAM,GACNG,MAAO,CACL+B,OAAQ,aAOlB,kBAAC,IAAD,CAAQnB,SAAUe,GAChB,kBAAC,EAAD,CAAqBK,OAAK,EAACC,KAAK,SAAS9C,UAAWmB,IACpD,kBAAC,EAAD,CACE0B,OAAK,EACLC,KAAK,YACL9C,UAAWoB,IAGb,kBAAC,EAAD,CAAcyB,OAAK,EAACC,KAAK,IAAI9C,UAAWgB,IACxC,kBAAC,EAAD,CAAc6B,OAAK,EAACC,KAAK,YAAY9C,UAAWkB,IAChD,kBAAC,EAAD,CAAc2B,OAAK,EAACC,KAAK,WAAW9C,UAAWiB,IAC/C,kBAAC,EAAD,CAAc4B,OAAK,EAACC,KAAK,YAAY9C,UAAWsB,IAChD,kBAAC,EAAD,CAAcuB,OAAK,EAACC,KAAK,YAAY9C,UAAWc,IAChD,kBAAC,IAAD,CAAOd,UAAWqB","file":"18.main.js","sourcesContent":["import React, { useContext } from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport AuthContext from \"../../context/auth/AuthContext\";\r\nimport { ImpulseSpinner as Spinner } from \"react-spinners-kit\";\r\n\r\nconst PrivateRoute = ({ component: Component, auth, ...rest }) => {\r\n  const { isAuthenticated, loading } = useContext(AuthContext);\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) => {\r\n        if (loading || isAuthenticated == null)\r\n          return (\r\n            <div className=\"spinner\">\r\n              <Spinner size={68} />\r\n            </div>\r\n          );\r\n        else if (!isAuthenticated) {\r\n          return <Redirect to=\"/login\" />;\r\n        } else {\r\n          return <Component {...props} />;\r\n        }\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import React, { useContext } from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport AuthContext from \"../../context/auth/AuthContext\";\r\nimport { ImpulseSpinner as Spinner } from \"react-spinners-kit\";\r\n\r\nconst AuthenticationRoute = ({ component: Component, auth, ...rest }) => {\r\n  const { isAuthenticated, loading } = useContext(AuthContext);\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) => {\r\n        if (loading || isAuthenticated == null)\r\n          return (\r\n            <div className=\"spinner\">\r\n              <Spinner size={60} style={{}} />\r\n            </div>\r\n          );\r\n        else if (isAuthenticated) {\r\n          return <Redirect to=\"/\" />;\r\n        } else {\r\n          return <Component {...props} />;\r\n        }\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AuthenticationRoute;\r\n","import React, { useContext, useEffect, lazy, Suspense } from \"react\";\r\nimport { Switch, useLocation, Route } from \"react-router-dom\";\r\nimport PrivateRoute from \"./PrivateRoute\";\r\nimport AuthenticationRoute from \"./AuthenticationRoute\";\r\nimport { useTransition, animated, config } from \"react-spring\";\r\nimport AuthContext from \"../../context/auth/AuthContext\";\r\nimport { ImpulseSpinner as Spinner } from \"react-spinners-kit\";\r\n\r\nconst Post = lazy(() => import(\"../post/Post\"));\r\nconst Home = lazy(() => import(\"../pages/Home\"));\r\nconst Account = lazy(() => import(\"../pages/Account\"));\r\nconst NewPost = lazy(() => import(\"../pages/NewPost\"));\r\nconst Login = lazy(() => import(\"../auth/Login\"));\r\nconst Register = lazy(() => import(\"../auth/Register\"));\r\nconst NotFound = lazy(() => import(\"../pages/NotFound\"));\r\nconst User = lazy(() => import(\"../pages/User\"));\r\n\r\nconst Routes = () => {\r\n  const { loggedIn } = useContext(AuthContext);\r\n  const location = useLocation();\r\n  const transitions = useTransition(location, (location) => location.pathname, {\r\n    from: {\r\n      opacity: 0,\r\n      transform: \"scale(0.6) translateX(-100%)\",\r\n    },\r\n    enter: {\r\n      opacity: 1,\r\n      transform: \"scale(1) translateX(0%)\",\r\n    },\r\n    leave: {\r\n      opacity: 0,\r\n      transform: \"scale(0.6) translateX(70%)\",\r\n    },\r\n    config: config.stiff,\r\n  });\r\n\r\n  useEffect(() => {\r\n    loggedIn();\r\n  }, []);\r\n  return (\r\n    <React.Fragment>\r\n      {transitions.map(({ item, props, key }) => (\r\n        <animated.div key={`${key}anim`} style={props} className=\"container\">\r\n          <Suspense\r\n            fallback={\r\n              <div className=\"main\">\r\n                <div className=\"spinner\">\r\n                  <Spinner\r\n                    size={50}\r\n                    style={{\r\n                      margin: \"auto\",\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            }\r\n          >\r\n            <Switch location={item}>\r\n              <AuthenticationRoute exact path=\"/login\" component={Login} />\r\n              <AuthenticationRoute\r\n                exact\r\n                path=\"/register\"\r\n                component={Register}\r\n              />\r\n\r\n              <PrivateRoute exact path=\"/\" component={Home} />\r\n              <PrivateRoute exact path=\"/add-post\" component={NewPost} />\r\n              <PrivateRoute exact path=\"/account\" component={Account} />\r\n              <PrivateRoute exact path=\"/user/:id\" component={User} />\r\n              <PrivateRoute exact path=\"/post/:id\" component={Post} />\r\n              <Route component={NotFound} />\r\n            </Switch>\r\n          </Suspense>\r\n        </animated.div>\r\n      ))}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Routes;\r\n"],"sourceRoot":""}