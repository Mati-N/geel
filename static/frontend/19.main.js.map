{"version":3,"sources":["webpack:///./src/Queries.js","webpack:///./src/components/pages/User.js"],"names":["ADD_USER","gql","LOGIN_USER","GET_POSTS","GET_POST","LIKED","VERIFY_TOKEN","LOGOUT_USER","LIKE","CREATE_POST","REFRESH_TOKEN","REVOKE_TOKEN","SELF_USER","SELF_POSTS","GET_USER","USER_POSTS","FOLLOW","CREATE_COMMENT","Offline","lazy","Posts","User","match","useQuery","variables","id","params","user_loading","loading","user_data","data","user_error","error","fetchMore","useContext","AuthContext","user","Logout","AlertContext","removeAlert","setAlert","useState","spin","setSpin","first","following","followers","setFollowing","useMutation","follow","useEffect","to","className","size","style","margin","isFollowing","userGet","edges","length","userPost","display","username","onClick","then","followUser","xmlns","width","height","viewBox","strokeWidth","stroke","fill","strokeLinecap","strokeLinejoin","d","cx","cy","r","x1","y1","x2","y2","points","posts","onEnter","query","cursor","pageInfo","endCursor","updateQuery","previousResult","fetchMoreResult","newEdges","hasNextPage","__typename"],"mappings":"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","file":"19.main.js","sourcesContent":["import {\r\n  gql\r\n} from \"@apollo/client\";\r\n\r\nexport const ADD_USER = gql `\r\n  mutation createUser($username: String!, $password: String!) {\r\n    createUser(input: { username: $username, password: $password }) {\r\n      ok\r\n      message\r\n      user {\r\n        username\r\n        id\r\n        password\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const LOGIN_USER = gql `\r\n  mutation tokenAuth($username: String!, $password: String!) {\r\n    tokenAuth(input: { username: $username, password: $password }) {\r\n      payload\r\n      token\r\n      refreshToken\r\n      user {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nexport const GET_POSTS = gql `\r\n  query posts($cursor: String) {\r\n    posts(first: 45, after: $cursor, orderBy: \"creation\") {\r\n      pageInfo {\r\n        endCursor\r\n        hasNextPage\r\n      }\r\n      edges {\r\n        node {\r\n          id\r\n          title\r\n          text\r\n          likers {\r\n            id\r\n          }\r\n          commentSet {\r\n            edges {\r\n              node {\r\n                id\r\n              }\r\n            }\r\n          }\r\n          creation\r\n          commentCount\r\n          user {\r\n            username\r\n            id\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_POST = gql `\r\n  query post($id: ID!, $cursor: String) {\r\n    posts(id: $id) {\r\n      edges {\r\n        node {\r\n          id\r\n          title\r\n          text\r\n          likers {\r\n            id\r\n          }\r\n          commentSet {\r\n            edges {\r\n              node {\r\n                id\r\n              }\r\n            }\r\n          }\r\n          creation\r\n          commentCount\r\n          user {\r\n            username\r\n            id\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    postComments(id: $id, after: $cursor) {\r\n      edges {\r\n        node {\r\n          id\r\n          user {\r\n            username\r\n            id\r\n          }\r\n          content\r\n          creation\r\n        }\r\n      }\r\n      pageInfo {\r\n        endCursor\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nexport const LIKED = gql `\r\n  query liked($post_id: ID!) {\r\n    liked(id: $post_id)\r\n  }\r\n`;\r\n\r\nexport const VERIFY_TOKEN = gql `\r\n  mutation verifyToken($token: String!) {\r\n    verifyToken(input: { token: $token }) {\r\n      payload\r\n    }\r\n  }\r\n`;\r\n\r\nexport const LOGOUT_USER = gql `\r\n  mutation {\r\n    deleteTokenCookie(input: {}) {\r\n      deleted\r\n    }\r\n  }\r\n`;\r\n\r\nexport const LIKE = gql `\r\n  mutation like($post_id: ID!) {\r\n    likePost(postId: $post_id) {\r\n      ok\r\n      post {\r\n        likers {\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CREATE_POST = gql `\r\n  mutation createPost($text: String!, $title: String!) {\r\n    createPost(input: { text: $text, title: $title }) {\r\n      ok\r\n      post {\r\n        id\r\n        title\r\n        text\r\n        likers {\r\n          id\r\n        }\r\n        commentSet {\r\n          edges {\r\n            node {\r\n              id\r\n            }\r\n          }\r\n        }\r\n        creation\r\n        commentCount\r\n        user {\r\n          username\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const REFRESH_TOKEN = gql `\r\n  mutation refreshToken($token: String!) {\r\n    refreshToken(input: { refreshToken: $token }) {\r\n      token\r\n      refreshToken\r\n    }\r\n  }\r\n`;\r\n\r\nexport const REVOKE_TOKEN = gql `\r\n  mutation revokeToken($token: String!) {\r\n    revokeToken(input: { refreshToken: $token }) {\r\n      revoked\r\n    }\r\n  }\r\n`;\r\n\r\nexport const SELF_USER = gql `\r\n  query self_user {\r\n    user {\r\n      id\r\n      username\r\n      posts {\r\n        edges {\r\n          node {\r\n            id\r\n          }\r\n        }\r\n      }\r\n      followers {\r\n        edges {\r\n          node {\r\n            id\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const SELF_POSTS = gql `\r\n  query self_posts($cursor: String) {\r\n    post(first: 20, orderBy: \"creation\", after: $cursor) {\r\n      edges {\r\n        node {\r\n          id\r\n          likers {\r\n            id\r\n          }\r\n          commentSet {\r\n            edges {\r\n              node {\r\n                id\r\n              }\r\n            }\r\n          }\r\n          text\r\n          title\r\n          creation\r\n        }\r\n      }\r\n      pageInfo {\r\n        hasNextPage\r\n        endCursor\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_USER = gql `\r\n  query get_user($id: ID!) {\r\n    userGet(id: $id) {\r\n      username\r\n      posts {\r\n        edges {\r\n          node {\r\n            id\r\n          }\r\n        }\r\n      }\r\n      followers {\r\n        edges {\r\n          node {\r\n            id\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    isFollowing(id: $id)\r\n  }\r\n`;\r\n\r\nexport const USER_POSTS = gql `\r\n  query user_posts($cursor: String, $id: ID!) {\r\n    userPost(first: 10, orderBy: \"creation\", after: $cursor, id: $id) {\r\n      edges {\r\n        node {\r\n          id\r\n          likers {\r\n            id\r\n          }\r\n          commentSet {\r\n            edges {\r\n              node {\r\n                id\r\n              }\r\n            }\r\n          }\r\n          text\r\n          title\r\n          creation\r\n        }\r\n      }\r\n      pageInfo {\r\n        hasNextPage\r\n        endCursor\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const FOLLOW = gql `\r\n  mutation followUser($id: ID!) {\r\n    followUser(id: $id) {\r\n      ok\r\n      user {\r\n        id\r\n        followers {\r\n          edges {\r\n            node {\r\n              id\r\n            }\r\n          }\r\n        }\r\n      }\r\n      message\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CREATE_COMMENT = gql `\r\n  mutation createComment($id: ID!, $comment: String!){\r\n    createComment(input: {\r\n      post: $id,\r\n      content: $comment\r\n    }) {\r\n      ok\r\n      comment {\r\n        id\r\n        user {\r\n          username\r\n          id\r\n        }\r\n        content\r\n        creation\r\n      }\r\n      __typename\r\n    }\r\n  }\r\n`;","import React, { useState, useContext, useEffect, lazy } from \"react\";\r\nimport { GET_USER, USER_POSTS, FOLLOW } from \"../../Queries\";\r\nimport { useQuery, useMutation } from \"@apollo/client\";\r\nimport { Waypoint } from \"react-waypoint\";\r\nimport { ImpulseSpinner as Spinner } from \"react-spinners-kit\";\r\nimport AuthContext from \"../../context/auth/AuthContext\";\r\nimport AlertContext from \"../../context/alert/AlertContext\";\r\nimport { Redirect } from \"react-router-dom\";\r\nconst Offline = lazy(() => import(\"./Offline\"));\r\nconst Posts = lazy(() => import(\"../post/Posts\"));\r\n\r\nconst User = ({ match }) => {\r\n  const {\r\n    loading: user_loading,\r\n    data: user_data,\r\n    error: user_error,\r\n  } = useQuery(GET_USER, { variables: { id: match.params.id } });\r\n  const { loading, data, error, fetchMore } = useQuery(USER_POSTS, {\r\n    variables: { id: match.params.id },\r\n  });\r\n  const { Logout, user } = useContext(AuthContext);\r\n  const { removeAlert, setAlert } = useContext(AlertContext);\r\n  const [spin, setSpin] = useState(false);\r\n  const [following, setFollowing] = useState({\r\n    first: true,\r\n    following: false,\r\n    followers: \"\",\r\n  });\r\n  const [follow] = useMutation(FOLLOW);\r\n\r\n  useEffect(() => {\r\n    removeAlert();\r\n  }, []);\r\n\r\n  if (user == match.params.id) {\r\n    return <Redirect to=\"/account\" />;\r\n  }\r\n\r\n  if (loading || !data || user_loading || !user_data)\r\n    return (\r\n      <div className=\"spinner\">\r\n        <Spinner\r\n          size={50}\r\n          style={{\r\n            margin: \"auto\",\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n\r\n  if (error || user_error) {\r\n    return <Offline />;\r\n  }\r\n\r\n  const more = () => {\r\n    fetchMore({\r\n      query: USER_POSTS,\r\n      variables: {\r\n        cursor: data.userPost.pageInfo.endCursor,\r\n        id: match.params.id,\r\n      },\r\n      updateQuery: (previousResult, { fetchMoreResult }) => {\r\n        setSpin(true);\r\n        const newEdges = fetchMoreResult.userPost.edges;\r\n        const pageInfo = fetchMoreResult.userPost.pageInfo;\r\n\r\n        if (!previousResult.userPost.pageInfo.hasNextPage) {\r\n          setSpin(false);\r\n          return previousResult;\r\n        }\r\n\r\n        return newEdges.length\r\n          ? {\r\n              userPost: {\r\n                __typename: previousResult.userPost.__typename,\r\n                edges: [...previousResult.userPost.edges, ...newEdges],\r\n                pageInfo,\r\n              },\r\n            }\r\n          : previousResult;\r\n      },\r\n    });\r\n  };\r\n\r\n  const followIt = () => {\r\n    follow({ variables: { id: match.params.id } }).then(\r\n      ({ data: { followUser } }) => {\r\n        setFollowing({\r\n          ...following,\r\n          following: !following.following,\r\n          followers: followUser.user.followers.edges.length,\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  if (!loading) {\r\n    if (following.first) {\r\n      setFollowing({\r\n        first: false,\r\n        following: user_data.isFollowing,\r\n        followers: user_data.userGet.followers.edges.length,\r\n      });\r\n    }\r\n  }\r\n\r\n  const { userPost } = data;\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <div className=\"account-info\">\r\n        <div className=\"account-info-top\">\r\n          <span className=\"username\" style={{ display: \"block\" }}>\r\n            {user_data.userGet.username}\r\n          </span>\r\n        </div>\r\n        <button className=\"btn btn-teal\" onClick={followIt}>\r\n          {!following.following ? (\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              className=\"icon icon-tabler icon-tabler-user-plus\"\r\n              width=\"25\"\r\n              height=\"25\"\r\n              viewBox=\"0 0 24 24\"\r\n              strokeWidth=\"1.5\"\r\n              stroke=\"rgb(248, 248, 248)\"\r\n              fill=\"none\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n            >\r\n              <path stroke=\"none\" d=\"M0 0h24v24H0z\" />\r\n              <circle cx=\"9\" cy=\"7\" r=\"4\" />\r\n              <path d=\"M3 21v-2a4 4 0 0 1 4 -4h4a4 4 0 0 1 4 4v2\" />\r\n              <path d=\"M16 11h6m-3 -3v6\" />\r\n            </svg>\r\n          ) : (\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              className=\"icon icon-tabler icon-tabler-user-minus\"\r\n              width=\"25\"\r\n              height=\"25\"\r\n              viewBox=\"0 0 24 24\"\r\n              strokeWidth=\"1.5\"\r\n              stroke=\"rgb(248, 248, 248)\"\r\n              fill=\"none\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n            >\r\n              <path stroke=\"none\" d=\"M0 0h24v24H0z\" />\r\n              <circle cx=\"9\" cy=\"7\" r=\"4\" />\r\n              <path d=\"M3 21v-2a4 4 0 0 1 4 -4h4a4 4 0 0 1 4 4v2\" />\r\n              <line x1=\"16\" y1=\"11\" x2=\"22\" y2=\"11\" />\r\n            </svg>\r\n          )}{\" \"}\r\n          {following.following ? \"Unfollow\" : \"Follow\"}\r\n        </button>\r\n        <div className=\"info-mini\">\r\n          <span className=\"info\">\r\n            Posts\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              className=\"icon icon-tabler icon-tabler-chevron-right\"\r\n              width=\"34\"\r\n              height=\"34\"\r\n              viewBox=\"0 0 24 24\"\r\n              strokeWidth=\"1.5\"\r\n              stroke=\"#607D8B\"\r\n              fill=\"none\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n            >\r\n              <path stroke=\"none\" d=\"M0 0h24v24H0z\" />\r\n              <polyline points=\"9 6 15 12 9 18\" />\r\n            </svg>{\" \"}\r\n            {user_data.userGet.posts.edges.length}\r\n          </span>\r\n          <span className=\"info\">\r\n            Followers\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              className=\"icon icon-tabler icon-tabler-chevron-right\"\r\n              width=\"34\"\r\n              height=\"34\"\r\n              viewBox=\"0 0 24 24\"\r\n              strokeWidth=\"1.5\"\r\n              stroke=\"#607D8B\"\r\n              fill=\"none\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n            >\r\n              <path stroke=\"none\" d=\"M0 0h24v24H0z\" />\r\n              <polyline points=\"9 6 15 12 9 18\" />\r\n            </svg>{\" \"}\r\n            {following.followers}\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <div className=\"main\">\r\n        <Posts posts={userPost.edges} />\r\n        <Waypoint\r\n          onEnter={() => {\r\n            more();\r\n          }}\r\n        >\r\n          <div className=\"spinner\">{spin && <Spinner size={40} />}</div>\r\n        </Waypoint>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default User;\r\n"],"sourceRoot":""}