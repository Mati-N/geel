{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","webpack:///./node_modules/@babel/runtime/helpers/iterableToArray.js","webpack:///./node_modules/@babel/runtime/helpers/nonIterableSpread.js","webpack:///./node_modules/@babel/runtime/helpers/toConsumableArray.js","webpack:///./src/components/pages/Home.js"],"names":["arrayLikeToArray","module","exports","arr","Array","isArray","iter","Symbol","iterator","Object","from","TypeError","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread","Offline","lazy","PostItem","Home","useQuery","GET_POSTS","loading","data","error","fetchMore","refetch","useState","spin","setSpin","className","size","style","margin","onClick","posts","edges","map","node","key","id","likes","likers","length","comments","commentSet","user_id","user","username","onEnter","query","variables","cursor","pageInfo","endCursor","updateQuery","previousResult","fetchMoreResult","hasNextPage","newEdges","__typename"],"mappings":";;;;8CAAA,IAAIA,EAAmB,2BAAQ,6DAM/BC,EAAOC,QAJP,SAA4BC,GAC1B,GAAIC,MAAMC,QAAQF,GAAM,OAAOH,EAAiBG,K;;;;4CCClDF,EAAOC,QAJP,SAA0BI,GACxB,GAAsB,oBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOF,MAAMM,KAAKJ,K;;;;4CCG1FL,EAAOC,QAJP,WACE,MAAM,IAAIS,UAAU,0I;;;;8CCDtB,IAAIC,EAAoB,4BAAQ,8DAE5BC,EAAkB,0BAAQ,4DAE1BC,EAA6B,qCAAQ,uEAErCC,EAAoB,4BAAQ,8DAMhCd,EAAOC,QAJP,SAA4BC,GAC1B,OAAOS,EAAkBT,IAAQU,EAAgBV,IAAQW,EAA2BX,IAAQY,M;;;;wtBCHxFC,EAAUC,gBAAK,kBAAM,gGACrBC,EAAWD,gBAAK,kBAAM,mGA4EbE,UA1Ef,WAAgB,MACuCC,mBAASC,aAAtDC,EADM,EACNA,QAASC,EADH,EACGA,KAAMC,EADT,EACSA,MAAOC,EADhB,EACgBA,UAAWC,EAD3B,EAC2BA,QAD3B,EAEUC,oBAAS,GAFnB,WAEPC,EAFO,KAEDC,EAFC,KAId,OAAIP,EAEA,yBAAKQ,UAAU,WACb,kBAAC,iBAAD,CACEC,KAAM,GACNC,MAAO,CACLC,OAAQ,WAMdT,EAEA,oCACE,kBAACR,EAAD,MACA,4BAAQc,UAAU,eAAeI,QAASR,GAA1C,YAkCJ,oCACE,yBAAKI,UAAU,QACZP,EAAKY,MAAMC,MAAMC,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OACpB,kBAACpB,EAAD,KACEqB,IAAKD,EAAKE,IACNF,EAFN,CAGEG,MAAOH,EAAKI,OAAOC,OACnBC,SAAUN,EAAKO,WAAWF,OAC1BG,QAASR,EAAKS,KAAKP,GACnBQ,SAAUV,EAAKS,KAAKC,eAGxB,kBAAC,WAAD,CAAUC,QAvCH,WACXxB,EAAU,CACRyB,MAAO7B,YACP8B,UAAW,CAAEC,OAAQ7B,EAAKY,MAAMkB,SAASC,WACzCC,YAAa,SAACC,EAAD,GAAyC,IAAtBC,EAAsB,EAAtBA,gBAE9B,GADA5B,GAAQ,IACH2B,EAAerB,MAAMkB,SAASK,YAEjC,OADA7B,GAAQ,GACD2B,EAET,IAAMG,EAAWF,EAAgBtB,MAAMC,MACjCiB,EAAWI,EAAgBtB,MAAMkB,SAEvC,OAAOM,EAAShB,OACZ,CACER,MAAO,CACLyB,WAAYJ,EAAerB,MAAMyB,WACjCxB,MAAO,GAAF,WAAMoB,EAAerB,MAAMC,OAA3B,IAAqCuB,IAC1CN,aAGJG,OAmBF,yBAAK1B,UAAU,WAAWF,GAAQ,kBAAC,iBAAD,CAASG,KAAM","file":"2.main.js","sourcesContent":["var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles;","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread;","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","import React, { useState, lazy } from \"react\";\r\nimport { GET_POSTS } from \"../../Queries\";\r\nimport { useQuery } from \"@apollo/client\";\r\n\r\nimport { Waypoint } from \"react-waypoint\";\r\nimport { ImpulseSpinner as Spinner } from \"react-spinners-kit\";\r\nconst Offline = lazy(() => import(\"./Offline\"));\r\nconst PostItem = lazy(() => import(\"../post/PostItem\"));\r\n\r\nfunction Home() {\r\n  const { loading, data, error, fetchMore, refetch } = useQuery(GET_POSTS);\r\n  const [spin, setSpin] = useState(false);\r\n\r\n  if (loading)\r\n    return (\r\n      <div className=\"spinner\">\r\n        <Spinner\r\n          size={50}\r\n          style={{\r\n            margin: \"auto\",\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n\r\n  if (error) {\r\n    return (\r\n      <>\r\n        <Offline />\r\n        <button className=\"btn btn-teal\" onClick={refetch}>\r\n          Refresh\r\n        </button>\r\n      </>\r\n    );\r\n  }\r\n\r\n  const more = () => {\r\n    fetchMore({\r\n      query: GET_POSTS,\r\n      variables: { cursor: data.posts.pageInfo.endCursor },\r\n      updateQuery: (previousResult, { fetchMoreResult }) => {\r\n        setSpin(true);\r\n        if (!previousResult.posts.pageInfo.hasNextPage) {\r\n          setSpin(false);\r\n          return previousResult;\r\n        }\r\n        const newEdges = fetchMoreResult.posts.edges;\r\n        const pageInfo = fetchMoreResult.posts.pageInfo;\r\n\r\n        return newEdges.length\r\n          ? {\r\n              posts: {\r\n                __typename: previousResult.posts.__typename,\r\n                edges: [...previousResult.posts.edges, ...newEdges],\r\n                pageInfo,\r\n              },\r\n            }\r\n          : previousResult;\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"main\">\r\n        {data.posts.edges.map(({ node }) => (\r\n          <PostItem\r\n            key={node.id}\r\n            {...node}\r\n            likes={node.likers.length}\r\n            comments={node.commentSet.length}\r\n            user_id={node.user.id}\r\n            username={node.user.username}\r\n          />\r\n        ))}\r\n        <Waypoint onEnter={more}>\r\n          <div className=\"spinner\">{spin && <Spinner size={40} />}</div>\r\n        </Waypoint>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n"],"sourceRoot":""}