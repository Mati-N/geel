{"version":3,"sources":["webpack:///./src/components/pages/Notifications.js"],"names":["Offline","lazy","Box","Notifications","useQuery","GET_NOTIFICATIONS","pollInterval","loading","data","error","fetchMore","refetch","readNotif","useMutation","READ_NOTIFICATION","useState","spin","setSpin","className","size","style","margin","onClick","selfNotification","edges","length","map","node","category","key","id","read","to","sender","variables","username","post","title","comment","content","substr","onEnter","query","cursor","pageInfo","endCursor","updateQuery","previousResult","fetchMoreResult","hasNextPage","newEdges","__typename"],"mappings":"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","file":"24.main.js","sourcesContent":["import React, { useState, lazy } from \"react\";\r\nimport { GET_NOTIFICATIONS, READ_NOTIFICATION } from \"../../Queries\";\r\nimport { useQuery, useMutation } from \"@apollo/client\";\r\nimport { Waypoint } from \"react-waypoint\";\r\nimport { ImpulseSpinner as Spinner } from \"react-spinners-kit\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst Offline = lazy(() => import(\"./Offline\"));\r\nconst Box = lazy(() => import(\"../SVG/Box.svg\"));\r\n\r\nconst Notifications = () => {\r\n  const { loading, data, error, fetchMore, refetch } = useQuery(\r\n    GET_NOTIFICATIONS,\r\n    {\r\n      pollInterval: 600,\r\n    }\r\n  );\r\n  const [readNotif] = useMutation(READ_NOTIFICATION);\r\n  const [spin, setSpin] = useState(true);\r\n\r\n  if (loading || !data)\r\n    return (\r\n      <div className=\"spinner\">\r\n        <Spinner\r\n          size={50}\r\n          style={{\r\n            margin: \"auto\",\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n\r\n  if (error) {\r\n    return (\r\n      <>\r\n        <Offline />\r\n        <button className=\"btn btn-teal\" onClick={refetch}>\r\n          Refresh\r\n        </button>\r\n      </>\r\n    );\r\n  }\r\n\r\n  const more = () => {\r\n    fetchMore({\r\n      query: GET_NOTIFICATIONS,\r\n      variables: { cursor: data.selfNotification.pageInfo.endCursor },\r\n      updateQuery: (previousResult, { fetchMoreResult }) => {\r\n        setSpin(true);\r\n        if (!previousResult.selfNotification.pageInfo.hasNextPage) {\r\n          setSpin(false);\r\n          return previousResult;\r\n        }\r\n        const newEdges = fetchMoreResult.selfNotification.edges;\r\n        const pageInfo = fetchMoreResult.selfNotification.pageInfo;\r\n\r\n        return newEdges.length\r\n          ? {\r\n              selfNotification: {\r\n                __typename: previousResult.selfNotification.__typename,\r\n                edges: [...previousResult.selfNotification.edges, ...newEdges],\r\n                pageInfo,\r\n              },\r\n            }\r\n          : previousResult;\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button className=\"mx-auto w-25\" onClick={() => readNotif()}>\r\n        Read All\r\n      </Button>\r\n      {data.selfNotification.edges.length == 0 && (\r\n        <div className=\"empty-box-holder\">\r\n          <Box />\r\n        </div>\r\n      )}\r\n      {data.selfNotification.edges.map(({ node }) => {\r\n        {\r\n          switch (node.category) {\r\n            case \"new_follow\":\r\n              return (\r\n                <div\r\n                  key={node.id}\r\n                  className={`notification ${node.read && \"notification-read\"}`}\r\n                >\r\n                  <Link\r\n                    to={`user/${node.sender.id}`}\r\n                    onClick={() =>\r\n                      node.read\r\n                        ? false\r\n                        : readNotif({ variables: { id: node.id } })\r\n                    }\r\n                  >\r\n                    {node.sender.username}\r\n                  </Link>{\" \"}\r\n                  Followed You!\r\n                </div>\r\n              );\r\n            case \"new_like\":\r\n              return (\r\n                <div\r\n                  key={node.id}\r\n                  className={`notification ${node.read && \"notification-read\"}`}\r\n                >\r\n                  <Link\r\n                    to={`user/${node.sender.id}`}\r\n                    onClick={() =>\r\n                      node.read\r\n                        ? false\r\n                        : readNotif({ variables: { id: node.id } })\r\n                    }\r\n                  >\r\n                    {node.sender.username}\r\n                  </Link>{\" \"}\r\n                  Liked your post{\" \"}\r\n                  <Link\r\n                    className=\"notification-post\"\r\n                    to={`post/${node.post.id}`}\r\n                    onClick={() =>\r\n                      node.read\r\n                        ? false\r\n                        : readNotif({ variables: { id: node.id } })\r\n                    }\r\n                  >\r\n                    {node.post.title}\r\n                  </Link>\r\n                </div>\r\n              );\r\n            case \"new_comment\":\r\n              return (\r\n                <div\r\n                  key={node.id}\r\n                  className={`notification ${node.read && \"notification-read\"}`}\r\n                >\r\n                  <Link\r\n                    to={`user/${node.sender.id}`}\r\n                    onClick={() =>\r\n                      node.read\r\n                        ? false\r\n                        : readNotif({ variables: { id: node.id } })\r\n                    }\r\n                  >\r\n                    {node.sender.username}\r\n                  </Link>{\" \"}\r\n                  Commented on your post \"\r\n                  <Link\r\n                    className=\"notification-post\"\r\n                    to={`post/${node.comment.post.id}`}\r\n                    className=\"notification-post-comment\"\r\n                    onClick={() =>\r\n                      node.read\r\n                        ? false\r\n                        : readNotif({ variables: { id: node.id } })\r\n                    }\r\n                  >\r\n                    {node.comment.post.title}\r\n                  </Link>\r\n                  \"\r\n                  <Link\r\n                    className=\"notification-post\"\r\n                    to={`post/${node.comment.post.id}/#${node.comment.id}c`}\r\n                    onClick={() =>\r\n                      node.read\r\n                        ? false\r\n                        : readNotif({ variables: { id: node.id } })\r\n                    }\r\n                  >\r\n                    {node.comment.content.substr(0, 60)}\r\n                  </Link>\r\n                </div>\r\n              );\r\n          }\r\n        }\r\n      })}\r\n      <Waypoint onEnter={more}>\r\n        <div className=\"refetch-and-spinner\">\r\n          <button className=\"btn btn-teal\" onClick={() => refetch()}>\r\n            Refetch\r\n          </button>\r\n          {spin && (\r\n            <div className=\"spinner\">\r\n              <Spinner size={40} />\r\n            </div>\r\n          )}\r\n        </div>\r\n      </Waypoint>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Notifications;\r\n"],"sourceRoot":""}