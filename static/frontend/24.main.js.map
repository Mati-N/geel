{"version":3,"sources":["webpack:///./src/components/post/Post.js"],"names":["PostItem","lazy","Comments","Post","id","match","params","useQuery","GET_POST","variables","loading","data","fetchMore","error","refetch","useState","spin","setSpin","size","node","posts","edges","key","user_id","user","username","show_comment","comments","postComments","onEnter","query","cursor","pageInfo","endCursor","updateQuery","previousResult","fetchMoreResult","hasNextPage","newEdges","length","post","__typename","className"],"mappings":";;;;iiFAMA,IAAMA,EAAWC,gBAAK,kBAAM,iGACtBC,EAAWD,gBAAK,kBAAM,iGAmEbE,UAjEF,SAAC,GAIR,IAFQC,EAER,EAHJC,MACEC,OAAUF,GAER,EACiDG,mBAASC,WAAU,CACtEC,UAAW,CAAEL,QADPM,EADJ,EACIA,QAASC,EADb,EACaA,KAAaC,GAD1B,EACmBC,MADnB,EAC0BD,WAD1B,KACqCE,QADrC,EAIoBC,oBAAS,GAJ7B,IAIGC,EAJH,KAISC,EAJT,KAoCJ,GAAIP,IAAYC,EACd,OAAO,kBAAC,iBAAD,CAASO,KAAM,KArCpB,IAuCIC,EAASR,EAAKS,MAAMC,MAAM,GAA1BF,KAER,OACE,oCACE,kBAACnB,EAAD,GACEsB,IAAKH,EAAKf,GACVmB,QAASJ,EAAKK,KAAKpB,GACnBqB,SAAUN,EAAKK,KAAKC,SACpBC,cAAc,GACVP,IAEN,kBAACjB,EAAD,CAAUyB,SAAUhB,EAAKiB,aAAaP,QAEtC,kBAAC,WAAD,CAAUQ,QA9CD,WACXjB,EAAU,CACRkB,MAAOtB,WACPC,UAAW,CAAEsB,OAAQpB,EAAKiB,aAAaI,SAASC,UAAW7B,MAC3D8B,YAAa,SAACC,EAAD,GAAyC,IAAtBC,EAAsB,EAAtBA,gBAE9B,GADAnB,GAAQ,IACHkB,EAAeP,aAAaI,SAASK,YAExC,OADApB,GAAQ,GACDkB,EAET,IAAMG,EAAWF,EAAgBR,aAAaP,MACxCW,EAAWI,EAAgBR,aAAaI,SAE9C,OAAOM,EAASC,OACZ,CACEC,KAAM,EAAF,KACCL,EAAeK,MADhB,IAEFZ,aAAc,CACZa,WAAYN,EAAeP,aAAaa,WACxCpB,MAAO,GAAF,SAAMc,EAAeP,aAAaP,OAAlC,EAA4CiB,IACjDN,eAING,KAGRlB,GAAQ,KAoBJ,yBAAKyB,UAAU,YACXhC,GAAWM,IAAS,kBAAC,iBAAD,CAASE,KAAM","file":"24.main.js","sourcesContent":["import React, { useState, lazy } from \"react\";\r\nimport { Waypoint } from \"react-waypoint\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { GET_POST } from \"../../Queries\";\r\nimport { ImpulseSpinner as Spinner } from \"react-spinners-kit\";\r\n\r\nconst PostItem = lazy(() => import(\"./PostItem\"));\r\nconst Comments = lazy(() => import(\"./Comments\"));\r\n\r\nconst Post = ({\r\n  match: {\r\n    params: { id },\r\n  },\r\n}) => {\r\n  const { loading, data, error, fetchMore, refetch } = useQuery(GET_POST, {\r\n    variables: { id },\r\n  });\r\n  const [spin, setSpin] = useState(true);\r\n\r\n  const more = () => {\r\n    fetchMore({\r\n      query: GET_POST,\r\n      variables: { cursor: data.postComments.pageInfo.endCursor, id },\r\n      updateQuery: (previousResult, { fetchMoreResult }) => {\r\n        setSpin(true);\r\n        if (!previousResult.postComments.pageInfo.hasNextPage) {\r\n          setSpin(false);\r\n          return previousResult;\r\n        }\r\n        const newEdges = fetchMoreResult.postComments.edges;\r\n        const pageInfo = fetchMoreResult.postComments.pageInfo;\r\n\r\n        return newEdges.length\r\n          ? {\r\n              post: {\r\n                ...previousResult.post,\r\n                postComments: {\r\n                  __typename: previousResult.postComments.__typename,\r\n                  edges: [...previousResult.postComments.edges, ...newEdges],\r\n                  pageInfo,\r\n                },\r\n              },\r\n            }\r\n          : previousResult;\r\n      },\r\n    });\r\n    setSpin(false);\r\n  };\r\n\r\n  if (loading && !data) {\r\n    return <Spinner size={40} />;\r\n  }\r\n  const { node } = data.posts.edges[0];\r\n\r\n  return (\r\n    <>\r\n      <PostItem\r\n        key={node.id}\r\n        user_id={node.user.id}\r\n        username={node.user.username}\r\n        show_comment={true}\r\n        {...node}\r\n      />\r\n      <Comments comments={data.postComments.edges} />\r\n\r\n      <Waypoint onEnter={more}>\r\n        <div className=\"spinner\">\r\n          {(loading || spin) && <Spinner size={40} />}\r\n        </div>\r\n      </Waypoint>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n"],"sourceRoot":""}