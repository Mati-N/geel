{"version":3,"sources":["webpack:///./src/components/pages/Account.js"],"names":["Posts","lazy","AccountInfo","Account","useQuery","SELF_USER","pollInterval","user_loading","loading","user_data","data","user_error","error","SELF_POSTS","fetchMore","refetch","user","useRecoilValue","authAtom","removeAlert","useResetRecoilState","alertAtom","useState","spin","setSpin","useEffect","className","size","style","margin","post","selfPost","posts","edges","self","id","username","more","query","variables","cursor","pageInfo","endCursor","updateQuery","previousResult","fetchMoreResult","newEdges","hasNextPage","length","__typename","imagePath","selfUser"],"mappings":";;;;orDAMA,IAAMA,EAAQC,gBAAK,kBAAM,8HACnBC,EAAcD,gBAAK,kBAAM,wIA8EhBE,UA5EC,WAAM,MAKhBC,mBAASC,YAAW,CACtBC,aAAc,MAJLC,EAFS,EAElBC,QACMC,EAHY,EAGlBC,KACOC,EAJW,EAIlBC,MAJkB,EAQiCR,mBAASS,cAAtDL,EARY,EAQZA,QAASE,EARG,EAQHA,KAAME,EARH,EAQGA,MAAOE,EARV,EAQUA,UAAWC,EARrB,EAQqBA,QACjCC,EAASC,yBAAeC,YAAxBF,KACFG,EAAcC,8BAAoBC,aAVpB,IAWIC,oBAAS,GAXb,GAWbC,EAXa,KAWPC,EAXO,KAiBpB,GAJAC,qBAAU,WACRN,MACC,IAECX,IAAYE,GAAQH,EACtB,OACE,yBAAKmB,UAAU,WACb,kBAAC,iBAAD,CACEC,KAAM,GACNC,MAAO,CACLC,OAAQ,WAMlB,GAAIjB,GAASD,EAAY,MAAO,GAAP,OAAUC,GAEnC,IA2BkBkB,EAASpB,EAAnBqB,SACR,OACE,oCACE,kBAAC7B,EAAD,CAAaO,UAAWA,IACxB,kBAACT,EAAD,CACEgC,MAAOF,EAAKG,MACZC,MAAM,EACNC,GAAInB,EACJoB,SAAS,MACTC,KApCO,WACXvB,EAAU,CACRwB,MAAOzB,aACP0B,UAAW,CAAEC,OAAQ9B,EAAKqB,SAASU,SAASC,WAC5CC,YAAa,SAACC,EAAD,GAAyC,IAAtBC,EAAsB,EAAtBA,gBAC9BrB,GAAQ,GACR,IAAMsB,EAAWD,EAAgBd,SAASE,MACpCQ,EAAWI,EAAgBd,SAASU,SAE1C,OAAKG,EAAeb,SAASU,SAASM,YAK/BD,EAASE,OACZ,CACEjB,SAAU,CACRkB,WAAYL,EAAeb,SAASkB,WACpChB,MAAO,GAAF,SAAMW,EAAeb,SAASE,OAA9B,EAAwCa,IAC7CL,aAGJG,GAZFpB,GAAQ,GACDoB,OA0BTrB,KAAMA,EACNR,QAASA,EACTmC,UAAWzC,EAAU0C,SAASD","file":"30.main.js","sourcesContent":["import React, { useState, useEffect, lazy } from \"react\";\r\nimport { SELF_POSTS, SELF_USER } from \"../../Queries\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { ImpulseSpinner as Spinner } from \"react-spinners-kit\";\r\nimport { useRecoilValue, useResetRecoilState } from \"recoil\";\r\nimport { authAtom, alertAtom } from \"../../atoms\";\r\nconst Posts = lazy(() => import(\"../post/Posts\"));\r\nconst AccountInfo = lazy(() => import(\"../layout/AccountInfo\"));\r\n\r\nconst Account = () => {\r\n  const {\r\n    loading: user_loading,\r\n    data: user_data,\r\n    error: user_error,\r\n  } = useQuery(SELF_USER, {\r\n    pollInterval: 3000,\r\n  });\r\n  const { loading, data, error, fetchMore, refetch } = useQuery(SELF_POSTS);\r\n  const { user } = useRecoilValue(authAtom);\r\n  const removeAlert = useResetRecoilState(alertAtom);\r\n  const [spin, setSpin] = useState(false);\r\n\r\n  useEffect(() => {\r\n    removeAlert();\r\n  }, []);\r\n\r\n  if (loading || !data || user_loading)\r\n    return (\r\n      <div className=\"spinner\">\r\n        <Spinner\r\n          size={50}\r\n          style={{\r\n            margin: \"auto\",\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n\r\n  if (error || user_error) return `${error}`;\r\n\r\n  const more = () => {\r\n    fetchMore({\r\n      query: SELF_POSTS,\r\n      variables: { cursor: data.selfPost.pageInfo.endCursor },\r\n      updateQuery: (previousResult, { fetchMoreResult }) => {\r\n        setSpin(true);\r\n        const newEdges = fetchMoreResult.selfPost.edges;\r\n        const pageInfo = fetchMoreResult.selfPost.pageInfo;\r\n\r\n        if (!previousResult.selfPost.pageInfo.hasNextPage) {\r\n          setSpin(false);\r\n          return previousResult;\r\n        }\r\n\r\n        return newEdges.length\r\n          ? {\r\n              selfPost: {\r\n                __typename: previousResult.selfPost.__typename,\r\n                edges: [...previousResult.selfPost.edges, ...newEdges],\r\n                pageInfo,\r\n              },\r\n            }\r\n          : previousResult;\r\n      },\r\n    });\r\n  };\r\n\r\n  const { selfPost: post } = data;\r\n  return (\r\n    <>\r\n      <AccountInfo user_data={user_data} />\r\n      <Posts\r\n        posts={post.edges}\r\n        self={true}\r\n        id={user}\r\n        username=\"You\"\r\n        more={more}\r\n        spin={spin}\r\n        refetch={refetch}\r\n        imagePath={user_data.selfUser.imagePath}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Account;\r\n"],"sourceRoot":""}