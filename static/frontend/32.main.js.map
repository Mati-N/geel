{"version":3,"sources":["webpack:///./src/components/pages/User.js"],"names":["Offline","lazy","Posts","User","match","useQuery","GET_USER","variables","id","params","user_loading","loading","user_data","data","user_error","error","USER_POSTS","fetchMore","refetch","user","useRecoilValue","authAtom","removeAlert","useResetRecoilState","alertAtom","useState","spin","setSpin","follow","useMutation","FOLLOW","useEffect","to","className","size","style","margin","userGet","userPost","Avatar","alt","src","imagePath","variant","username","substring","onClick","update","cache","writeFragment","fragment","gql","followerCount","followUser","isFollowing","xmlns","width","height","viewBox","strokeWidth","stroke","fill","strokeLinecap","strokeLinejoin","d","cx","cy","r","x1","y1","x2","y2","postCount","following","followers","posts","edges","self","more","query","cursor","pageInfo","endCursor","updateQuery","previousResult","fetchMoreResult","newEdges","hasNextPage","length","__typename"],"mappings":";;;;0jEAQA,IAAMA,EAAUC,gBAAK,kBAAM,gGACrBC,EAAQD,gBAAK,kBAAM,8HAuLVE,UArLF,SAAC,GAAc,IAAZC,EAAY,EAAZA,MAAY,EAKtBC,mBAASC,WAAU,CAAEC,UAAW,CAAEC,GAAIJ,EAAMK,OAAOD,MAH5CE,EAFe,EAExBC,QACMC,EAHkB,EAGxBC,KACOC,EAJiB,EAIxBC,MAJwB,EAM2BV,mBAASW,aAAY,CACxET,UAAW,CAAEC,GAAIJ,EAAMK,OAAOD,MADxBG,EANkB,EAMlBA,QAASE,EANS,EAMTA,KAAME,EANG,EAMHA,MAAOE,EANJ,EAMIA,UAAWC,EANf,EAMeA,QAGjCC,EAASC,yBAAeC,YAAxBF,KACFG,EAAcC,8BAAoBC,aAVd,IAWFC,oBAAS,GAXP,GAWnBC,EAXmB,KAWbC,EAXa,KAYnBC,EAZmB,EAYTC,sBAAYC,UAZH,MAkB1B,GAJAC,qBAAU,WACRT,MACC,IAECH,GAAQf,EAAMK,OAAOD,GACvB,OAAO,kBAAC,WAAD,CAAUwB,GAAG,aAGtB,GAAIrB,IAAYE,GAAQH,IAAiBE,EACvC,OACE,yBAAKqB,UAAU,WACb,kBAAC,iBAAD,CACEC,KAAM,GACNC,MAAO,CACLC,OAAQ,WAMlB,GAAIrB,GAASD,EACX,OAAO,kBAACd,EAAD,MAiCT,GAAyB,MAArBY,EAAUyB,QACZ,OAAO,mDAGT,IAqBQC,EAAazB,EAAbyB,SAER,OACE,oCACE,yBAAKL,UAAU,gBACb,yBAAKA,UAAU,oBACb,kBAACM,OAAD,CACEC,IAAI,kBACJC,IAAK7B,EAAUyB,QAAQK,UACvBC,QAAQ,SACRR,MAAO,CACLC,OAAQ,UAGTxB,EAAUyB,QAAQO,SAASC,UAAU,EAAG,IAE3C,0BAAMZ,UAAU,yBACbrB,EAAUyB,QAAQO,WAIvB,yBAAKX,UAAU,aACb,4BAAQA,UAAU,eAAea,QA3CxB,WACflB,EAAO,CACLrB,UAAW,CAAEC,GAAIJ,EAAMK,OAAOD,IAC9BuC,OAAQ,SAACC,EAAD,GAAqB,IAAXnC,EAAW,EAAXA,KACZmC,GACFA,EAAMC,cAAc,CAClBzC,GAAI,YAAF,OAAcJ,EAAMK,OAAOD,IAC7B0C,SAAUC,IAAF,KAMRtC,KAAM,CACJuC,cAAevC,EAAKwC,WAAWlC,KAAKiC,cACpCE,YAAazC,EAAKwC,WAAWlC,KAAKmC,oBA6BnC1C,EAAUyB,QAAQiB,YACjB,yBACEC,MAAM,6BACNtB,UAAU,yCACVuB,MAAM,KACNC,OAAO,KACPC,QAAQ,YACRC,YAAY,MACZC,OAAO,qBACPC,KAAK,OACLC,cAAc,QACdC,eAAe,SAEf,0BAAMH,OAAO,OAAOI,EAAE,kBACtB,4BAAQC,GAAG,IAAIC,GAAG,IAAIC,EAAE,MACxB,0BAAMH,EAAE,8CACR,0BAAMA,EAAE,sBAGV,yBACET,MAAM,6BACNtB,UAAU,0CACVuB,MAAM,KACNC,OAAO,KACPC,QAAQ,YACRC,YAAY,MACZC,OAAO,qBACPC,KAAK,OACLC,cAAc,QACdC,eAAe,SAEf,0BAAMH,OAAO,OAAOI,EAAE,kBACtB,4BAAQC,GAAG,IAAIC,GAAG,IAAIC,EAAE,MACxB,0BAAMH,EAAE,8CACR,0BAAMI,GAAG,KAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,QAElC,IACF3D,EAAUyB,QAAQiB,YAAc,WAAa,UAEhD,0BAAMrB,UAAU,QACbrB,EAAUyB,QAAQmC,UAAY,EAC3B5D,EAAUyB,QAAQmC,UAClB,KAAM,IAHZ,OAIO5D,EAAUyB,QAAQmC,UAAY,EAAI,IAAM,IAE/C,0BAAMvC,UAAU,QACbrB,EAAUyB,QAAQe,cAAgB,EAAIxC,EAAUyB,QAAQe,cAAgB,KAD3E,YAEGqB,UAAUC,UAAY,EAAI,IAAM,MAIvC,kBAACxE,EAAD,CACEyE,MAAOrC,EAASsC,MAChBC,MAAM,EACNjC,SAAUhC,EAAUyB,QAAQO,SAC5BpC,GAAIJ,EAAMK,OAAOD,GACjBsE,KAtIO,WACX7D,EAAU,CACR8D,MAAO/D,aACPT,UAAW,CACTyE,OAAQnE,EAAKyB,SAAS2C,SAASC,UAC/B1E,GAAIJ,EAAMK,OAAOD,IAEnB2E,YAAa,SAACC,EAAD,GAAyC,IAAtBC,EAAsB,EAAtBA,gBAC9B1D,GAAQ,GACR,IAAM2D,EAAWD,EAAgB/C,SAASsC,MACpCK,EAAWI,EAAgB/C,SAAS2C,SAE1C,OAAKG,EAAe9C,SAAS2C,SAASM,YAK/BD,EAASE,OACZ,CACElD,SAAU,CACRmD,WAAYL,EAAe9C,SAASmD,WACpCb,MAAO,GAAF,SAAMQ,EAAe9C,SAASsC,OAA9B,EAAwCU,IAC7CL,aAGJG,GAZFzD,GAAQ,GACDyD,OAyHT1D,KAAMA,EACNR,QAASA,EACTwB,UAAW9B,EAAUyB,QAAQK","file":"32.main.js","sourcesContent":["import React, { useState, useEffect, lazy } from \"react\";\r\nimport { GET_USER, USER_POSTS, FOLLOW } from \"../../Queries\";\r\nimport { useQuery, useMutation } from \"@apollo/client\";\r\nimport { ImpulseSpinner as Spinner } from \"react-spinners-kit\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { authAtom, alertAtom } from \"../../atoms\";\r\nimport { useRecoilValue, useResetRecoilState } from \"recoil\";\r\n\r\nconst Offline = lazy(() => import(\"./Offline\"));\r\nconst Posts = lazy(() => import(\"../post/Posts\"));\r\n\r\nconst User = ({ match }) => {\r\n  const {\r\n    loading: user_loading,\r\n    data: user_data,\r\n    error: user_error,\r\n  } = useQuery(GET_USER, { variables: { id: match.params.id } });\r\n  const { loading, data, error, fetchMore, refetch } = useQuery(USER_POSTS, {\r\n    variables: { id: match.params.id },\r\n  });\r\n  const { user } = useRecoilValue(authAtom);\r\n  const removeAlert = useResetRecoilState(alertAtom);\r\n  const [spin, setSpin] = useState(false)\r\n  const [follow] = useMutation(FOLLOW);\r\n\r\n  useEffect(() => {\r\n    removeAlert();\r\n  }, []);\r\n\r\n  if (user == match.params.id) {\r\n    return <Redirect to=\"/account\" />;\r\n  }\r\n\r\n  if (loading || !data || user_loading || !user_data)\r\n    return (\r\n      <div className=\"spinner\">\r\n        <Spinner\r\n          size={50}\r\n          style={{\r\n            margin: \"auto\",\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n\r\n  if (error || user_error) {\r\n    return <Offline />;\r\n  }\r\n\r\n  const more = () => {\r\n    fetchMore({\r\n      query: USER_POSTS,\r\n      variables: {\r\n        cursor: data.userPost.pageInfo.endCursor,\r\n        id: match.params.id,\r\n      },\r\n      updateQuery: (previousResult, { fetchMoreResult }) => {\r\n        setSpin(true);\r\n        const newEdges = fetchMoreResult.userPost.edges;\r\n        const pageInfo = fetchMoreResult.userPost.pageInfo;\r\n\r\n        if (!previousResult.userPost.pageInfo.hasNextPage) {\r\n          setSpin(false);\r\n          return previousResult;\r\n        }\r\n\r\n        return newEdges.length\r\n          ? {\r\n              userPost: {\r\n                __typename: previousResult.userPost.__typename,\r\n                edges: [...previousResult.userPost.edges, ...newEdges],\r\n                pageInfo,\r\n              },\r\n            }\r\n          : previousResult;\r\n      },\r\n    });\r\n  };\r\n\r\n  if (user_data.userGet == null) {\r\n    return <h1>User Does Not Exist</h1>;\r\n  }\r\n\r\n  const followIt = () => {\r\n    follow({\r\n      variables: { id: match.params.id },\r\n      update: (cache, { data }) => {\r\n        if (cache) {\r\n          cache.writeFragment({\r\n            id: `UserNode:${match.params.id}`,\r\n            fragment: gql`\r\n              fragment User on UserNode {\r\n                isFollowing\r\n                followerCount\r\n              }\r\n            `,\r\n            data: {\r\n              followerCount: data.followUser.user.followerCount,\r\n              isFollowing: data.followUser.user.isFollowing,\r\n            },\r\n          });}\r\n        }});\r\n  };\r\n\r\n  const { userPost } = data;\r\n\r\n  return (\r\n    <>\r\n      <div className=\"account-info\">\r\n        <div className=\"account-info-top\">\r\n          <Avatar\r\n            alt=\"profile picture\"\r\n            src={user_data.userGet.imagePath}\r\n            variant=\"circle\"\r\n            style={{\r\n              margin: \"0.4em\",\r\n            }}\r\n          >\r\n            {user_data.userGet.username.substring(0, 1)}\r\n          </Avatar>\r\n          <span className=\"username inline-block\">\r\n            {user_data.userGet.username}\r\n          </span>\r\n        </div>\r\n\r\n        <div className=\"info-mini\">\r\n          <button className=\"btn btn-teal\" onClick={followIt}>\r\n            {user_data.userGet.isFollowing ? (\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                className=\"icon icon-tabler icon-tabler-user-plus\"\r\n                width=\"25\"\r\n                height=\"25\"\r\n                viewBox=\"0 0 24 24\"\r\n                strokeWidth=\"1.5\"\r\n                stroke=\"rgb(248, 248, 248)\"\r\n                fill=\"none\"\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n              >\r\n                <path stroke=\"none\" d=\"M0 0h24v24H0z\" />\r\n                <circle cx=\"9\" cy=\"7\" r=\"4\" />\r\n                <path d=\"M3 21v-2a4 4 0 0 1 4 -4h4a4 4 0 0 1 4 4v2\" />\r\n                <path d=\"M16 11h6m-3 -3v6\" />\r\n              </svg>\r\n            ) : (\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                className=\"icon icon-tabler icon-tabler-user-minus\"\r\n                width=\"25\"\r\n                height=\"25\"\r\n                viewBox=\"0 0 24 24\"\r\n                strokeWidth=\"1.5\"\r\n                stroke=\"rgb(248, 248, 248)\"\r\n                fill=\"none\"\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n              >\r\n                <path stroke=\"none\" d=\"M0 0h24v24H0z\" />\r\n                <circle cx=\"9\" cy=\"7\" r=\"4\" />\r\n                <path d=\"M3 21v-2a4 4 0 0 1 4 -4h4a4 4 0 0 1 4 4v2\" />\r\n                <line x1=\"16\" y1=\"11\" x2=\"22\" y2=\"11\" />\r\n              </svg>\r\n            )}{\" \"}\r\n            {user_data.userGet.isFollowing ? \"Unfollow\" : \"Follow\"}\r\n          </button>\r\n          <span className=\"info\">\r\n            {user_data.userGet.postCount > 0\r\n              ? user_data.userGet.postCount\r\n              : \"No\"}{\" \"}\r\n            Post{user_data.userGet.postCount > 1 ? \"s\" : \"\"}\r\n          </span>\r\n          <span className=\"info\">\r\n            {user_data.userGet.followerCount > 0 ? user_data.userGet.followerCount : \"No\"} Follower\r\n            {following.followers > 1 ? \"s\" : \"\"}\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <Posts\r\n        posts={userPost.edges}\r\n        self={true}\r\n        username={user_data.userGet.username}\r\n        id={match.params.id}\r\n        more={more}\r\n        spin={spin}\r\n        refetch={refetch}\r\n        imagePath={user_data.userGet.imagePath}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default User;\r\n"],"sourceRoot":""}