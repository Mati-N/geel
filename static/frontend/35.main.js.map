{"version":3,"sources":["webpack:///./src/components/pages/User.js"],"names":["UserInfo","lazy","Offline","Posts","User","match","useQuery","GET_USER","variables","id","params","user_loading","loading","user_data","data","user_error","error","USER_POSTS","fetchMore","refetch","user","useRecoilValue","authAtom","removeAlert","useResetRecoilState","alertAtom","useState","spin","setSpin","useEffect","to","className","size","style","margin","userGet","userPost","posts","edges","self","username","more","query","cursor","pageInfo","endCursor","updateQuery","previousResult","fetchMoreResult","newEdges","hasNextPage","length","__typename","imagePath"],"mappings":";;;;0wDAQA,IAAMA,EAAWC,gBAAK,kBAAM,kIACtBC,EAAUD,gBAAK,kBAAM,gGACrBE,EAAQF,gBAAK,kBAAM,8HA8FVG,UA5FF,SAAC,GAAc,IAAZC,EAAY,EAAZA,MAAY,EAKtBC,mBAASC,WAAU,CAAEC,UAAW,CAAEC,GAAIJ,EAAMK,OAAOD,MAH5CE,EAFe,EAExBC,QACMC,EAHkB,EAGxBC,KACOC,EAJiB,EAIxBC,MAJwB,EAM2BV,mBAASW,aAAY,CACxET,UAAW,CAAEC,GAAIJ,EAAMK,OAAOD,MADxBG,EANkB,EAMlBA,QAASE,EANS,EAMTA,KAAME,EANG,EAMHA,MAAOE,EANJ,EAMIA,UAAWC,EANf,EAMeA,QAGjCC,EAASC,yBAAeC,YAAxBF,KACFG,EAAcC,8BAAoBC,aAVd,IAWFC,oBAAS,GAXP,GAWnBC,EAXmB,KAWbC,EAXa,KAiB1B,GAJAC,qBAAU,WACRN,MACC,IAECH,GAAQf,EAAMK,OAAOD,GACvB,OAAO,kBAAC,WAAD,CAAUqB,GAAG,aAGtB,GAAIlB,IAAYE,GAAQH,IAAiBE,EACvC,OACE,yBAAKkB,UAAU,WACb,kBAAC,iBAAD,CACEC,KAAM,GACNC,MAAO,CACLC,OAAQ,WAMlB,GAAIlB,GAASD,EACX,OAAO,kBAACb,EAAD,MAiCT,GAAyB,MAArBW,EAAUsB,QACZ,OAAO,mDApEiB,IAyElBC,EAAatB,EAAbsB,SAER,OACE,oCACC,kBAACpC,EAAD,CAAUoB,KAAMP,EAAUsB,UACzB,kBAAChC,EAAD,CACEkC,MAAOD,EAASE,MAChBC,MAAM,EACNC,SAAU3B,EAAUsB,QAAQK,SAC5B/B,GAAIJ,EAAMK,OAAOD,GACjBgC,KA9CO,WACXvB,EAAU,CACRwB,MAAOzB,aACPT,UAAW,CACTmC,OAAQ7B,EAAKsB,SAASQ,SAASC,UAC/BpC,GAAIJ,EAAMK,OAAOD,IAEnBqC,YAAa,SAACC,EAAD,GAAyC,IAAtBC,EAAsB,EAAtBA,gBAC9BpB,GAAQ,GACR,IAAMqB,EAAWD,EAAgBZ,SAASE,MACpCM,EAAWI,EAAgBZ,SAASQ,SAE1C,OAAKG,EAAeX,SAASQ,SAASM,YAK/BD,EAASE,OACZ,CACEf,SAAU,CACRgB,WAAYL,EAAeX,SAASgB,WACpCd,MAAO,GAAF,SAAMS,EAAeX,SAASE,OAA9B,EAAwCW,IAC7CL,aAGJG,GAZFnB,GAAQ,GACDmB,OAiCTpB,KAAMA,EACNR,QAASA,EACTkC,UAAWxC,EAAUsB,QAAQkB","file":"35.main.js","sourcesContent":["import React, { useState, useEffect, lazy } from \"react\";\r\nimport { GET_USER, USER_POSTS } from \"../../Queries\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { ImpulseSpinner as Spinner } from \"react-spinners-kit\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { authAtom, alertAtom } from \"../../atoms\";\r\nimport { useRecoilValue, useResetRecoilState } from \"recoil\";\r\n\r\nconst UserInfo = lazy(() => import(\"../layout/UserInfo\"))\r\nconst Offline = lazy(() => import(\"./Offline\"));\r\nconst Posts = lazy(() => import(\"../post/Posts\"));\r\n\r\nconst User = ({ match }) => {\r\n  const {\r\n    loading: user_loading,\r\n    data: user_data,\r\n    error: user_error,\r\n  } = useQuery(GET_USER, { variables: { id: match.params.id } });\r\n  const { loading, data, error, fetchMore, refetch } = useQuery(USER_POSTS, {\r\n    variables: { id: match.params.id },\r\n  });\r\n  const { user } = useRecoilValue(authAtom);\r\n  const removeAlert = useResetRecoilState(alertAtom);\r\n  const [spin, setSpin] = useState(false)\r\n\r\n  useEffect(() => {\r\n    removeAlert();\r\n  }, []);\r\n\r\n  if (user == match.params.id) {\r\n    return <Redirect to=\"/account\" />;\r\n  }\r\n\r\n  if (loading || !data || user_loading || !user_data)\r\n    return (\r\n      <div className=\"spinner\">\r\n        <Spinner\r\n          size={50}\r\n          style={{\r\n            margin: \"auto\",\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n\r\n  if (error || user_error) {\r\n    return <Offline />;\r\n  }\r\n\r\n  const more = () => {\r\n    fetchMore({\r\n      query: USER_POSTS,\r\n      variables: {\r\n        cursor: data.userPost.pageInfo.endCursor,\r\n        id: match.params.id,\r\n      },\r\n      updateQuery: (previousResult, { fetchMoreResult }) => {\r\n        setSpin(true);\r\n        const newEdges = fetchMoreResult.userPost.edges;\r\n        const pageInfo = fetchMoreResult.userPost.pageInfo;\r\n\r\n        if (!previousResult.userPost.pageInfo.hasNextPage) {\r\n          setSpin(false);\r\n          return previousResult;\r\n        }\r\n\r\n        return newEdges.length\r\n          ? {\r\n              userPost: {\r\n                __typename: previousResult.userPost.__typename,\r\n                edges: [...previousResult.userPost.edges, ...newEdges],\r\n                pageInfo,\r\n              },\r\n            }\r\n          : previousResult;\r\n      },\r\n    });\r\n  };\r\n\r\n  if (user_data.userGet == null) {\r\n    return <h1>User Does Not Exist</h1>;\r\n  }\r\n\r\n\r\n\r\n  const { userPost } = data;\r\n\r\n  return (\r\n    <>\r\n     <UserInfo user={user_data.userGet} />\r\n      <Posts\r\n        posts={userPost.edges}\r\n        self={true}\r\n        username={user_data.userGet.username}\r\n        id={match.params.id}\r\n        more={more}\r\n        spin={spin}\r\n        refetch={refetch}\r\n        imagePath={user_data.userGet.imagePath}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default User;\r\n"],"sourceRoot":""}