{"version":3,"sources":["webpack:///./src/components/pages/Home.js","webpack:///./src/components/pages/Offline.js","webpack:///./src/components/post/PostItem.js"],"names":["Home","useQuery","GET_POSTS","loading","data","error","fetchMore","refetch","useState","spin","setSpin","className","size","style","margin","onClick","posts","edges","map","node","key","id","likes","likers","length","comments","commentSet","user_id","user","username","onEnter","query","variables","cursor","pageInfo","endCursor","updateQuery","previousResult","fetchMoreResult","hasNextPage","newEdges","__typename","Offline","PostItem"],"mappings":";;;;i1BAoFeA,UA1Ef,WAAgB,MACuCC,mBAASC,aAAtDC,EADM,EACNA,QAASC,EADH,EACGA,KAAMC,EADT,EACSA,MAAOC,EADhB,EACgBA,UAAWC,EAD3B,EAC2BA,QAD3B,EAEUC,oBAAS,GAFnB,WAEPC,EAFO,KAEDC,EAFC,KAId,OAAIP,EAEA,yBAAKQ,UAAU,WACb,kBAAC,iBAAD,CACEC,KAAM,GACNC,MAAO,CACLC,OAAQ,WAMdT,EAEA,oCACE,kBAAC,UAAD,MACA,4BAAQM,UAAU,eAAeI,QAASR,GAA1C,YAkCJ,oCACE,yBAAKI,UAAU,QACZP,EAAKY,MAAMC,MAAMC,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OACpB,kBAAC,UAAD,KACEC,IAAKD,EAAKE,IACNF,EAFN,CAGEG,MAAOH,EAAKI,OAAOC,OACnBC,SAAUN,EAAKO,WAAWF,OAC1BG,QAASR,EAAKS,KAAKP,GACnBQ,SAAUV,EAAKS,KAAKC,eAGxB,kBAAC,WAAD,CAAUC,QAvCH,WACXxB,EAAU,CACRyB,MAAO7B,YACP8B,UAAW,CAAEC,OAAQ7B,EAAKY,MAAMkB,SAASC,WACzCC,YAAa,SAACC,EAAD,GAAyC,IAAtBC,EAAsB,EAAtBA,gBAE9B,GADA5B,GAAQ,IACH2B,EAAerB,MAAMkB,SAASK,YAEjC,OADA7B,GAAQ,GACD2B,EAET,IAAMG,EAAWF,EAAgBtB,MAAMC,MACjCiB,EAAWI,EAAgBtB,MAAMkB,SAEvC,OAAOM,EAAShB,OACZ,CACER,MAAO,CACLyB,WAAYJ,EAAerB,MAAMyB,WACjCxB,MAAO,GAAF,WAAMoB,EAAerB,MAAMC,OAA3B,IAAqCuB,IAC1CN,aAGJG,OAmBF,yBAAK1B,UAAU,WAAWF,GAAQ,kBAAC,iBAAD,CAASG,KAAM,W;;;;6DC7E3D,qEAWe8B,UATC,WACd,OACE,6BACE,6DACA,oD;;;;6DCNN,sDAqLeC,UAJE,WACf,MAAO","file":"4.main.js","sourcesContent":["import React, { useState, lazy } from \"react\";\r\nimport { GET_POSTS } from \"../../Queries\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { Waypoint } from \"react-waypoint\";\r\nimport { ImpulseSpinner as Spinner } from \"react-spinners-kit\";\r\n/*const Offline = lazy(() => import(\"./Offline\"));\r\nconst PostItem = lazy(() => import(\"../post/PostItem\"));*/\r\nimport Offline from \"./Offline\";\r\nimport PostItem from \"../post/PostItem\";\r\n\r\nfunction Home() {\r\n  const { loading, data, error, fetchMore, refetch } = useQuery(GET_POSTS);\r\n  const [spin, setSpin] = useState(true);\r\n\r\n  if (loading)\r\n    return (\r\n      <div className=\"spinner\">\r\n        <Spinner\r\n          size={50}\r\n          style={{\r\n            margin: \"auto\",\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n\r\n  if (error) {\r\n    return (\r\n      <>\r\n        <Offline />\r\n        <button className=\"btn btn-teal\" onClick={refetch}>\r\n          Refresh\r\n        </button>\r\n      </>\r\n    );\r\n  }\r\n\r\n  const more = () => {\r\n    fetchMore({\r\n      query: GET_POSTS,\r\n      variables: { cursor: data.posts.pageInfo.endCursor },\r\n      updateQuery: (previousResult, { fetchMoreResult }) => {\r\n        setSpin(true);\r\n        if (!previousResult.posts.pageInfo.hasNextPage) {\r\n          setSpin(false);\r\n          return previousResult;\r\n        }\r\n        const newEdges = fetchMoreResult.posts.edges;\r\n        const pageInfo = fetchMoreResult.posts.pageInfo;\r\n\r\n        return newEdges.length\r\n          ? {\r\n              posts: {\r\n                __typename: previousResult.posts.__typename,\r\n                edges: [...previousResult.posts.edges, ...newEdges],\r\n                pageInfo,\r\n              },\r\n            }\r\n          : previousResult;\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"main\">\r\n        {data.posts.edges.map(({ node }) => (\r\n          <PostItem\r\n            key={node.id}\r\n            {...node}\r\n            likes={node.likers.length}\r\n            comments={node.commentSet.length}\r\n            user_id={node.user.id}\r\n            username={node.user.username}\r\n          />\r\n        ))}\r\n        <Waypoint onEnter={more}>\r\n          <div className=\"spinner\">{spin && <Spinner size={40} />}</div>\r\n        </Waypoint>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\n\r\nconst Offline = () => {\r\n  return (\r\n    <div>\r\n      <h1>It seems like you are offline</h1>\r\n      <small>Try refreshing</small>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Offline;\r\n","/*import React, { useState, useEffect, useRef, lazy } from \"react\";\r\nimport { useLazyQuery, useMutation, from } from \"@apollo/client\";\r\nimport { LIKED, LIKE } from \"../../Queries\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSpring, animated } from \"react-spring\";\r\n\r\nconst Liked = lazy(() => import(\"../SVG/Like.svg\"));\r\nconst Heart = lazy(() => import(\"../SVG/Heart.svg\"));\r\nconst Comments = lazy(() => import(\"../SVG/Comments.svg\"));\r\n\r\nconst PostItem = ({\r\n  text,\r\n  title,\r\n  username,\r\n  id,\r\n  likes,\r\n  creation,\r\n  user_id,\r\n  comments,\r\n}) => {\r\n  const initialState = {\r\n    done: false,\r\n    likes,\r\n    hasMore: false,\r\n    height: \"32vh\",\r\n    loading: false,\r\n    comments,\r\n  };\r\n  const [liked] = useLazyQuery(LIKED, {\r\n    variables: { post_id: id },\r\n    onCompleted: (data) => {\r\n      setState({ ...state, liked: data.liked });\r\n    },\r\n  });\r\n\r\n  const [hovered, setHovered] = useState(false);\r\n  const self = useRef(null);\r\n\r\n  const [likePost] = useMutation(LIKE);\r\n  const [state, setState] = useState(initialState);\r\n\r\n  const expandText = useSpring({\r\n    to: {\r\n      maxHeight: state.expand ? `${self.current.scrollHeight}px` : \"230px\",\r\n      height: state.expand ? `${self.current.scrollHeight}px` : \"230px\",\r\n    },\r\n    from: {\r\n      maxHeight: !state.expand ? \"230px\" : `${self.current.scrollHeight}px`,\r\n      height: !state.expand ? \"230px\" : `${self.current.scrollHeight}px`,\r\n    },\r\n    duration: \"1s\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    liked();\r\n    setState({\r\n      ...state,\r\n      hasMore: self.current.scrollHeight > self.current.clientHeight,\r\n      loading: false,\r\n    });\r\n  }, []);\r\n\r\n  const timeSince = (date) => {\r\n    let seconds = Math.floor((new Date() - date) / 1000);\r\n\r\n    let interval = seconds / 31536000;\r\n    if (interval > 1) {\r\n      const flr = Math.floor(interval);\r\n      return Math.floor(interval) + (flr === 1 ? \" year\" : \" years\");\r\n    }\r\n\r\n    interval = seconds / 2592000;\r\n    if (interval > 1) {\r\n      const flr = Math.floor(interval);\r\n      return flr + (flr === 1 ? \" month\" : \" months\");\r\n    }\r\n\r\n    interval = seconds / 86400;\r\n    if (interval > 1) {\r\n      const flr = Math.floor(interval);\r\n      return Math.floor(flr) + (flr === 1 ? \" day\" : \" days\");\r\n    }\r\n\r\n    interval = seconds / 3600;\r\n    if (interval > 1) {\r\n      const flr = Math.floor(interval);\r\n      return flr + (flr === 1 ? \" hour\" : \" hours\");\r\n    }\r\n\r\n    interval = seconds / 60;\r\n    if (interval > 1) {\r\n      const flr = Math.floor(interval);\r\n      return flr + (flr == 1 ? \" minute\" : \" minutes\");\r\n    }\r\n    return \"Seconds\";\r\n  };\r\n\r\n  const like = () => {\r\n    likePost({ variables: { post_id: id } })\r\n      .catch((error) => console.log(error))\r\n      .then(({ data: { likePost } }) => {\r\n        setState({\r\n          ...state,\r\n          liked: !state.liked,\r\n          likes: likePost.post.likers.length,\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"post card\">\r\n      <div className=\"post-top card-top\">\r\n        <div className=\"post-info-top\">\r\n          <Link to={`user/${user_id}`} className=\"post-user\">\r\n            {\" \"}\r\n            {username}{\" \"}\r\n          </Link>\r\n          <small className=\"post-time\">\r\n            {timeSince(new Date(creation))} ago{\" \"}\r\n          </small>\r\n        </div>\r\n        <h5 className=\"post-title\">{title}</h5>\r\n      </div>\r\n      <animated.pre\r\n        ref={self}\r\n        className={`post-text`}\r\n        style={state.hasMore ? expandText : {}}\r\n      >\r\n        {text}\r\n        {state.hasMore && (\r\n          <button\r\n            className=\"more\"\r\n            onClick={() => {\r\n              setState({ ...state, expand: !state.expand });\r\n            }}\r\n          >\r\n            {state.expand ? \"less\" : \"more\"}\r\n          </button>\r\n        )}\r\n      </animated.pre>\r\n      {!state.loading && (\r\n        <div className=\"info-bottom\">\r\n          <span\r\n            className=\"like\"\r\n            onClick={() => {\r\n              like();\r\n            }}\r\n            onMouseOver={() => setHovered(true)}\r\n            onMouseOut={() => setHovered(false)}\r\n          >\r\n            {!hovered ? (\r\n              state.liked ? (\r\n                <Liked className=\"like-icon\" />\r\n              ) : (\r\n                <Heart className=\"like-icon\" />\r\n              )\r\n            ) : !state.liked ? (\r\n              <Liked className=\"like-icon\" />\r\n            ) : (\r\n              <Heart className=\"like-icon\" />\r\n            )}\r\n            {state.likes > 0 && state.likes}\r\n          </span>\r\n          <span className=\"like\">\r\n            <Link to={`/post/${id}`} className=\"like-icon\">\r\n              <Comments />\r\n            </Link>\r\n            {state.comments > 0 && state.comments}\r\n          </span>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};*/\r\n\r\nimport React from \"react\";\r\n\r\nconst PostItem = () => {\r\n  return \"WHY ISNT IT NOT WORKING\";\r\n};\r\n\r\nexport default PostItem;\r\n"],"sourceRoot":""}