{"version":3,"sources":["webpack:///./src/components/pages/Post.js","webpack:///./src/components/post/PostItem.js"],"names":["Post","id","match","params","useQuery","GET_COMMENTS","variables","loading","post","data","error","fetchMore","refetch","readQuery","query","GET_POSTS","useState","spin","className","key","likes","likers","length","comments","commentSet","user_id","user","username","Liked","lazy","Heart","Comments","PostItem","text","title","creation","initialState","done","hasMore","height","useLazyQuery","LIKED","post_id","onCompleted","setState","state","liked","hovered","setHovered","self","useRef","useMutation","LIKE","likePost","expandText","useSpring","to","maxHeight","expand","current","scrollHeight","from","duration","useEffect","clientHeight","date","seconds","Math","floor","Date","interval","flr","timeSince","pre","ref","style","onClick","console","log","then","onMouseOver","onMouseOut"],"mappings":"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","file":"4.main.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PostItem from \"../post/PostItem\";\r\nimport { Waypoint } from \"react-waypoint\";\r\nimport { readQuery, useQuery } from \"@apollo/client\";\r\nimport { GET_POSTS, GET_COMMENTS } from \"../../Queries\";\r\nimport { ImpulseSpinner as Spinner } from \"react-spinners-kit\";\r\n\r\nconst Post = ({\r\n  match: {\r\n    params: { id },\r\n  },\r\n}) => {\r\n  const { loading, data, error, fetchMore, refetch } = useQuery(GET_COMMENTS, {\r\n    variables: { id },\r\n  });\r\n  const { post } = readQuery({\r\n    query: GET_POSTS,\r\n    variables: {\r\n      id,\r\n    },\r\n  });\r\n  const [spin, setSpin] = useState(true);\r\n\r\n  const more = () => {\r\n    fetchMore({\r\n      query: GET_COMMENTS,\r\n      variables: { cursor: data.postComments.pageInfo.endCursor },\r\n      updateQuery: (previousResult, { fetchMoreResult }) => {\r\n        setSpin(true);\r\n        if (!previousResult.postComments.pageInfo.hasNextPage) {\r\n          setSpin(false);\r\n          return previousResult;\r\n        }\r\n        const newEdges = fetchMoreResult.postComments.edges;\r\n        const pageInfo = fetchMoreResult.postComments.pageInfo;\r\n\r\n        return newEdges.length\r\n          ? {\r\n              postComments: {\r\n                __typename: previousResult.postComments.__typename,\r\n                edges: [...previousResult.posts.edges, ...newEdges],\r\n                pageInfo,\r\n              },\r\n            }\r\n          : previousResult;\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <PostItem\r\n        key={post.id}\r\n        {...post}\r\n        likes={post.likers.length}\r\n        comments={post.commentSet.length}\r\n        user_id={post.user.id}\r\n        username={post.user.username}\r\n      />\r\n      {(loading || spin) && <Spinner />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React, { useState, useEffect, useRef, lazy } from \"react\";\r\nimport { useLazyQuery, useMutation, from } from \"@apollo/client\";\r\nimport { LIKED, LIKE } from \"../../Queries\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nconst Liked = lazy(() => import(\"../SVG/Like.svg\"));\r\nconst Heart = lazy(() => import(\"../SVG/Heart.svg\"));\r\nconst Comments = lazy(() => import(\"../SVG/Comments.svg\"));\r\n\r\nconst PostItem = ({\r\n  text,\r\n  title,\r\n  username,\r\n  id,\r\n  likes,\r\n  creation,\r\n  user_id,\r\n  comments,\r\n}) => {\r\n  const initialState = {\r\n    done: false,\r\n    likes,\r\n    hasMore: false,\r\n    height: \"32vh\",\r\n    loading: false,\r\n    comments,\r\n  };\r\n  const [liked] = useLazyQuery(LIKED, {\r\n    variables: { post_id: id },\r\n    onCompleted: (data) => {\r\n      setState({ ...state, liked: data.liked });\r\n    },\r\n  });\r\n\r\n  const [hovered, setHovered] = useState(false);\r\n  const self = useRef(null);\r\n\r\n  const [likePost] = useMutation(LIKE);\r\n  const [state, setState] = useState(initialState);\r\n\r\n  const expandText = useSpring({\r\n    to: {\r\n      maxHeight: state.expand ? `${self.current.scrollHeight}px` : \"230px\",\r\n      height: state.expand ? `${self.current.scrollHeight}px` : \"230px\",\r\n    },\r\n    from: {\r\n      maxHeight: !state.expand ? \"230px\" : `${self.current.scrollHeight}px`,\r\n      height: !state.expand ? \"230px\" : `${self.current.scrollHeight}px`,\r\n    },\r\n    duration: \"1s\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    liked();\r\n    setState({\r\n      ...state,\r\n      hasMore: self.current.scrollHeight > self.current.clientHeight,\r\n      loading: false,\r\n    });\r\n  }, []);\r\n\r\n  const timeSince = (date) => {\r\n    let seconds = Math.floor((new Date() - date) / 1000);\r\n\r\n    let interval = seconds / 31536000;\r\n    if (interval > 1) {\r\n      const flr = Math.floor(interval);\r\n      return Math.floor(interval) + (flr === 1 ? \" year\" : \" years\");\r\n    }\r\n\r\n    interval = seconds / 2592000;\r\n    if (interval > 1) {\r\n      const flr = Math.floor(interval);\r\n      return flr + (flr === 1 ? \" month\" : \" months\");\r\n    }\r\n\r\n    interval = seconds / 86400;\r\n    if (interval > 1) {\r\n      const flr = Math.floor(interval);\r\n      return Math.floor(flr) + (flr === 1 ? \" day\" : \" days\");\r\n    }\r\n\r\n    interval = seconds / 3600;\r\n    if (interval > 1) {\r\n      const flr = Math.floor(interval);\r\n      return flr + (flr === 1 ? \" hour\" : \" hours\");\r\n    }\r\n\r\n    interval = seconds / 60;\r\n    if (interval > 1) {\r\n      const flr = Math.floor(interval);\r\n      return flr + (flr == 1 ? \" minute\" : \" minutes\");\r\n    }\r\n    return \"Seconds\";\r\n  };\r\n\r\n  const like = () => {\r\n    likePost({ variables: { post_id: id } })\r\n      .catch((error) => console.log(error))\r\n      .then(({ data: { likePost } }) => {\r\n        setState({\r\n          ...state,\r\n          liked: !state.liked,\r\n          likes: likePost.post.likers.length,\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"post card\">\r\n      <div className=\"post-top card-top\">\r\n        <div className=\"post-info-top\">\r\n          <Link to={`user/${user_id}`} className=\"post-user\">\r\n            {\" \"}\r\n            {username}{\" \"}\r\n          </Link>\r\n          <small className=\"post-time\">\r\n            {timeSince(new Date(creation))} ago{\" \"}\r\n          </small>\r\n        </div>\r\n        <h5 className=\"post-title\">{title}</h5>\r\n      </div>\r\n      <animated.pre\r\n        ref={self}\r\n        className={`post-text`}\r\n        style={state.hasMore ? expandText : {}}\r\n      >\r\n        {text}\r\n        {state.hasMore && (\r\n          <button\r\n            className=\"more\"\r\n            onClick={() => {\r\n              setState({ ...state, expand: !state.expand });\r\n            }}\r\n          >\r\n            {state.expand ? \"less\" : \"more\"}\r\n          </button>\r\n        )}\r\n      </animated.pre>\r\n      {!state.loading && (\r\n        <div className=\"info-bottom\">\r\n          <span\r\n            className=\"like\"\r\n            onClick={() => {\r\n              like();\r\n            }}\r\n            onMouseOver={() => setHovered(true)}\r\n            onMouseOut={() => setHovered(false)}\r\n          >\r\n            {!hovered ? (\r\n              state.liked ? (\r\n                <Liked className=\"like-icon\" />\r\n              ) : (\r\n                <Heart className=\"like-icon\" />\r\n              )\r\n            ) : !state.liked ? (\r\n              <Liked className=\"like-icon\" />\r\n            ) : (\r\n              <Heart className=\"like-icon\" />\r\n            )}\r\n            {state.likes > 0 && state.likes}\r\n          </span>\r\n          <span className=\"like\">\r\n            <Link to={`/post/${id}`} className=\"like-icon\">\r\n              <Comments />\r\n            </Link>\r\n            {state.comments > 0 && state.comments}\r\n          </span>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostItem;\r\n"],"sourceRoot":""}