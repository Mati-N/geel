{"version":3,"sources":["webpack:///./src/components/pages/NewPost.js"],"names":["useStyles","makeStyles","theme","form","marginTop","spacing","width","margin","breakpoints","up","formField","padding","formControl","formLabel","fontSize","submit","NewPost","classes","addPost","useMutation","CREATE_POST","history","useHistory","setAlert","useSetRecoilState","alertAtom","removeAlert","useResetRecoilState","useEffect","initialValues","title","content","validationSchema","Yup","max","required","min","onSubmit","values","state","setSubmitting","variables","text","update","cache","data","followingPosts","readQuery","query","FOLLOWING_POSTS","newFollowingData","edges","__typename","node","createPost","post","writeQuery","e","all_posts","GET_POSTS","posts","newPostsData","selfPost","SELF_POSTS","newSelfData","console","log","then","ok","message","type","push","isSubmitting","isValid","dirty","className","fullWidth","name","as","TextField","label","component","FormHelperText","error","multiline","variant","rows","rowsMax","disabled"],"mappings":"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","file":"40.main.js","sourcesContent":["import React, { useContext, useEffect } from \"react\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport {\r\n  CREATE_POST,\r\n  GET_POSTS,\r\n  FOLLOWING_POSTS,\r\n  SELF_POSTS,\r\n} from \"../../Queries\";\r\nimport { useSetRecoilState, useResetRecoilState } from \"recoil\";\r\nimport { alertAtom } from \"../../atoms\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Formik, Field, ErrorMessage, Form } from \"formik\";\r\nimport {\r\n  TextField,\r\n  FormControl,\r\n  makeStyles,\r\n  FormHelperText,\r\n} from \"@material-ui/core\";\r\nimport * as Yup from \"yup\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  form: {\r\n    marginTop: theme.spacing(15),\r\n    width: \"75%\", // Fix IE 11 issue.\r\n    margin: \"auto\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: \"90%\",\r\n    },\r\n  },\r\n  formField: {\r\n    padding: \"0.2em\",\r\n  },\r\n  formControl: {\r\n    margin: \"0.1em\",\r\n    padding: \"0.1em\",\r\n  },\r\n  formLabel: {\r\n    margin: \"auto\",\r\n    width: \"auto\",\r\n    fontSize: \"2.5em\",\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nconst NewPost = () => {\r\n  const classes = useStyles();\r\n  const [addPost] = useMutation(CREATE_POST);\r\n  const history = useHistory();\r\n  const setAlert = useSetRecoilState(alertAtom);\r\n  const removeAlert = useResetRecoilState(alertAtom);\r\n\r\n  useEffect(() => {\r\n    removeAlert();\r\n  }, []);\r\n\r\n  const onSubmit = (state) => {\r\n    addPost({\r\n      variables: { title: state.title, text: state.content },\r\n      update: (cache, { data }) => {\r\n        if (cache) {\r\n          try {\r\n            let { followingPosts } = cache.readQuery({\r\n              query: FOLLOWING_POSTS,\r\n            });\r\n            if (followingPosts) {\r\n              const newFollowingData = {\r\n                ...followingPosts,\r\n                edges: [\r\n                  {\r\n                    __typename: \"PostNodeEdge\",\r\n                    node: data.createPost.post,\r\n                  },\r\n                  ...followingPosts.edges,\r\n                ],\r\n              };\r\n\r\n              cache.writeQuery({\r\n                query: FOLLOWING_POSTS,\r\n                data: {\r\n                  followingPosts: newFollowingData,\r\n                },\r\n              });\r\n            }\r\n          } catch (e) {}\r\n\r\n          try {\r\n            let { posts: all_posts } = cache.readQuery({ query: GET_POSTS });\r\n\r\n            if (all_posts) {\r\n              const newPostsData = {\r\n                ...all_posts,\r\n                edges: [\r\n                  {\r\n                    __typename: \"PostNodeEdge\",\r\n                    node: data.createPost.post,\r\n                  },\r\n                  ...all_posts.edges,\r\n                ],\r\n              };\r\n              cache.writeQuery({\r\n                query: GET_POSTS,\r\n                data: {\r\n                  posts: newPostsData,\r\n                },\r\n              });\r\n            }\r\n          } catch (e) {}\r\n\r\n          try {\r\n            let { selfPost } = cache.readQuery({ query: SELF_POSTS });\r\n\r\n            if (selfPost) {\r\n              const newSelfData = {\r\n                ...selfPost,\r\n                edges: [\r\n                  {\r\n                    __typename: \"PostNodeEdge\",\r\n                    node: data.createPost.post,\r\n                  },\r\n                  ...selfPost.edges,\r\n                ],\r\n              };\r\n              cache.writeQuery({\r\n                query: SELF_POSTS,\r\n                data: {\r\n                  selfPost: newSelfData,\r\n                },\r\n              });\r\n            }\r\n          } catch (e) {}\r\n        }\r\n      },\r\n    })\r\n      .catch((e) => console.log(e))\r\n      .then((data) => {\r\n        if (data) {\r\n          if (data !== null && data.data.createPost.ok) {\r\n            setAlert({ message: \"Post Sent\", type: \"success\" });\r\n            history.push(\"/\");\r\n          } else {\r\n            setAlert({ message: \"Something went wrong\", type: \"warning\" });\r\n          }\r\n        }\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{ title: \"\", content: \"\" }}\r\n      validationSchema={Yup.object({\r\n        title: Yup.string()\r\n          .max(30, \"Must be 30 characters or less\")\r\n          .required(\"Required\"),\r\n        content: Yup.string()\r\n          .min(20, \"Must be 20 characters or more\")\r\n          .required(\"Required\"),\r\n      })}\r\n      onSubmit={(values, { setSubmitting }) => {\r\n        setSubmitting(true);\r\n        onSubmit(values);\r\n        setSubmitting(false);\r\n      }}\r\n    >\r\n      {({ isSubmitting, isValid, dirty }) => (\r\n        <Form className={classes.form}>\r\n          <p className={classes.formLabel}>New Post</p>\r\n          <FormControl className={classes.formControl} fullWidth>\r\n            <Field\r\n              type=\"text\"\r\n              name=\"title\"\r\n              as={TextField}\r\n              label=\"Title\"\r\n              className={classes.formField}\r\n              fullWidth\r\n            />\r\n            <ErrorMessage\r\n              name=\"title\"\r\n              component={FormHelperText}\r\n              error={true}\r\n            />\r\n          </FormControl>\r\n          <FormControl className={classes.formControl} fullWidth>\r\n            <Field\r\n              type=\"text\"\r\n              name=\"content\"\r\n              as={TextField}\r\n              label=\"Content\"\r\n              className={classes.formField}\r\n              multiline\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              rows={10}\r\n              rowsMax={35}\r\n            />\r\n            <ErrorMessage\r\n              name=\"content\"\r\n              component={FormHelperText}\r\n              error={true}\r\n            />\r\n          </FormControl>\r\n          <FormControl className={classes.formControl} fullWidth>\r\n            <button\r\n              type=\"submit\"\r\n              className=\"btn btn-teal\"\r\n              disabled={isSubmitting || !isValid || !dirty}\r\n            >\r\n              Submit\r\n            </button>\r\n          </FormControl>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default NewPost;\r\n"],"sourceRoot":""}