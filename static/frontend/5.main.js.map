{"version":3,"sources":["webpack:///./node_modules/@material-ui/icons/MarkunreadMailboxTwoTone.js","webpack:///./src/components/pages/Notifications.js"],"names":["_interopRequireDefault","Object","defineProperty","exports","value","default","_react","_default","createElement","Fragment","d","opacity","Offline","lazy","NotificationItem","Notifications","useQuery","GET_NOTIFICATIONS","pollInterval","loading","data","error","fetchMore","refetch","useState","spin","setSpin","className","size","style","margin","onClick","minWidth","variant","color","startIcon","readNotif","selfNotification","edges","length","preserveAspectRatio","map","node","key","id","onEnter","query","variables","cursor","pageInfo","endCursor","updateQuery","previousResult","fetchMoreResult","hasNextPage","newEdges","__typename"],"mappings":";;;;2DAEA,IAAIA,EAAyB,qDAAQ,kEAErCC,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAElB,IAAIC,EAASN,EAAuB,cAAQ,kCAIxCO,GAAW,EAFMP,EAAuB,8BAAQ,6DAElBK,SAASC,EAAOD,QAAQG,cAAcF,EAAOD,QAAQI,SAAU,KAAMH,EAAOD,QAAQG,cAAc,OAAQ,CAC1IE,EAAG,2BACHC,QAAS,OACPL,EAAOD,QAAQG,cAAc,OAAQ,CACvCE,EAAG,iHACA,4BAELP,EAAQE,QAAUE,G;;;;q7DCXlB,IAAMK,EAAUC,gBAAK,kBAAM,gGACrBC,EAAmBD,gBAAK,kBAAM,4HAkGrBE,UAhGO,WAAM,MAC2BC,mBACnDC,oBACA,CACEC,aAAc,MAHVC,EADkB,EAClBA,QAASC,EADS,EACTA,KAAMC,EADG,EACHA,MAAOC,EADJ,EACIA,UAAWC,EADf,EACeA,QADf,IAOFC,oBAAS,GAPP,GAOnBC,EAPmB,KAObC,EAPa,KAS1B,GAAIP,IAAYC,EACd,OACE,yBAAKO,UAAU,WACb,kBAAC,iBAAD,CACEC,KAAM,GACNC,MAAO,CACLC,OAAQ,WAMlB,GAAIT,EACF,OACE,oCACE,kBAACT,EAAD,MACA,4BAAQe,UAAU,eAAeI,QAASR,GAA1C,YAiCN,OACE,oCACE,kBAAC,UAAD,CACEI,UAAU,mBACVE,MAAO,CAAEG,SAAU,OACnBC,QAAQ,YACRC,MAAM,UACNC,UAAW,kBAAC,IAAD,MACXJ,QAAS,kBAAMK,cANjB,YAUuC,GAAtChB,EAAKiB,iBAAiBC,MAAMC,QAC3B,yBAAKZ,UAAU,iFACb,kBAAC,UAAD,CAAQA,UAAU,YAAYa,qBAAmB,KAGrD,yBAAKb,UAAU,iBACZP,EAAKiB,iBAAiBC,MAAMG,KAAI,YAAc,IAAXC,EAAW,EAAXA,KAClC,OAAO,kBAAC5B,EAAD,CAAkB4B,KAAMA,EAAMC,IAAKD,EAAKE,SAGnD,kBAAC,WAAD,CAAUC,QAhDD,WACXvB,EAAU,CACRwB,MAAO7B,oBACP8B,UAAW,CAAEC,OAAQ5B,EAAKiB,iBAAiBY,SAASC,WACpDC,YAAa,SAACC,EAAD,GAAyC,IAAtBC,EAAsB,EAAtBA,gBAE9B,GADA3B,GAAQ,IACH0B,EAAef,iBAAiBY,SAASK,YAE5C,OADA5B,GAAQ,GACD0B,EAET,IAAMG,EAAWF,EAAgBhB,iBAAiBC,MAC5CW,EAAWI,EAAgBhB,iBAAiBY,SAElD,OAAOM,EAAShB,OACZ,CACEF,iBAAkB,CAChBmB,WAAYJ,EAAef,iBAAiBmB,WAC5ClB,MAAO,GAAF,SAAMc,EAAef,iBAAiBC,OAAtC,EAAgDiB,IACrDN,aAGJG,OA4BJ,yBAAKzB,UAAU,uBACb,4BAAQA,UAAU,eAAeI,QAAS,kBAAMR,MAAhD,WAGCE,GACC,yBAAKE,UAAU,WACb,kBAAC,iBAAD,CAASC,KAAM","file":"5.main.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(_react.default.Fragment, null, _react.default.createElement(\"path\", {\n  d: \"M10 12H6V8H4v12h16V8H10z\",\n  opacity: \".3\"\n}), _react.default.createElement(\"path\", {\n  d: \"M20 6H10v2h10v12H4V8h2v4h2V4h6V0H6v6H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2z\"\n})), 'MarkunreadMailboxTwoTone');\n\nexports.default = _default;","import React, { useState, lazy } from \"react\";\r\nimport { GET_NOTIFICATIONS } from \"../../Queries\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { Waypoint } from \"react-waypoint\";\r\nimport { ImpulseSpinner as Spinner } from \"react-spinners-kit\";\r\nimport NoData from \"../SVG/NoData.svg\";\r\nimport MarkunreadMailboxTwoToneIcon from \"@material-ui/icons/MarkunreadMailboxTwoTone\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst Offline = lazy(() => import(\"./Offline\"));\r\nconst NotificationItem = lazy(() => import(\"../layout/NotificationItem\"));\r\n\r\nconst Notifications = () => {\r\n  const { loading, data, error, fetchMore, refetch } = useQuery(\r\n    GET_NOTIFICATIONS,\r\n    {\r\n      pollInterval: 600,\r\n    }\r\n  );\r\n  const [spin, setSpin] = useState(true);\r\n\r\n  if (loading || !data)\r\n    return (\r\n      <div className=\"spinner\">\r\n        <Spinner\r\n          size={50}\r\n          style={{\r\n            margin: \"auto\",\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n\r\n  if (error) {\r\n    return (\r\n      <>\r\n        <Offline />\r\n        <button className=\"btn btn-teal\" onClick={refetch}>\r\n          Refresh\r\n        </button>\r\n      </>\r\n    );\r\n  }\r\n\r\n  const more = () => {\r\n    fetchMore({\r\n      query: GET_NOTIFICATIONS,\r\n      variables: { cursor: data.selfNotification.pageInfo.endCursor },\r\n      updateQuery: (previousResult, { fetchMoreResult }) => {\r\n        setSpin(true);\r\n        if (!previousResult.selfNotification.pageInfo.hasNextPage) {\r\n          setSpin(false);\r\n          return previousResult;\r\n        }\r\n        const newEdges = fetchMoreResult.selfNotification.edges;\r\n        const pageInfo = fetchMoreResult.selfNotification.pageInfo;\r\n\r\n        return newEdges.length\r\n          ? {\r\n              selfNotification: {\r\n                __typename: previousResult.selfNotification.__typename,\r\n                edges: [...previousResult.selfNotification.edges, ...newEdges],\r\n                pageInfo,\r\n              },\r\n            }\r\n          : previousResult;\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        className=\"mx-auto d-block \"\r\n        style={{ minWidth: \"25%\" }}\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        startIcon={<MarkunreadMailboxTwoToneIcon />}\r\n        onClick={() => readNotif()}\r\n      >\r\n        Read All\r\n      </Button>\r\n      {data.selfNotification.edges.length == 0 && (\r\n        <div className=\"w-75 h-75 m-auto d-flex align-items-center justify-content-center flex-column\">\r\n          <NoData className=\"w-50 h-50\" preserveAspectRatio />\r\n        </div>\r\n      )}\r\n      <div className=\"notifications\">\r\n        {data.selfNotification.edges.map(({ node }) => {\r\n          return <NotificationItem node={node} key={node.id} />;\r\n        })}\r\n      </div>\r\n      <Waypoint onEnter={more}>\r\n        <div className=\"refetch-and-spinner\">\r\n          <button className=\"btn btn-teal\" onClick={() => refetch()}>\r\n            Refetch\r\n          </button>\r\n          {spin && (\r\n            <div className=\"spinner\">\r\n              <Spinner size={40} />\r\n            </div>\r\n          )}\r\n        </div>\r\n      </Waypoint>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Notifications;\r\n"],"sourceRoot":""}