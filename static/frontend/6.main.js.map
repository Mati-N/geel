{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","webpack:///./node_modules/@babel/runtime/helpers/iterableToArray.js","webpack:///./node_modules/@babel/runtime/helpers/nonIterableSpread.js","webpack:///./node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js","webpack:///./node_modules/@babel/runtime/helpers/toConsumableArray.js","webpack:///./src/Queries.js","webpack:///./src/components/pages/NewPost.js"],"names":["arrayLikeToArray","module","exports","arr","Array","isArray","iter","Symbol","iterator","Object","from","TypeError","strings","raw","slice","freeze","defineProperties","value","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread","ADD_USER","gql","LOGIN_USER","GET_POSTS","GET_POST","LIKED","VERIFY_TOKEN","LOGOUT_USER","LIKE","CREATE_POST","REFRESH_TOKEN","REVOKE_TOKEN","SELF_USER","SELF_POSTS","GET_USER","USER_POSTS","FOLLOW","CREATE_COMMENT","Redirect","lazy","NewPost","useState","title","content","state","setState","disabled","setDisabled","sent","setSent","useMutation","addPost","useContext","AlertContext","setAlert","removeAlert","onChange","e","name","target","length","substring","useEffect","to","className","onSubmit","preventDefault","variables","text","update","cache","data","posts","readQuery","query","console","log","newData","edges","__typename","node","createPost","post","writeQuery","then","ok","method","htmlFor","type","placeholder","aria-describedby"],"mappings":"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","file":"6.main.js","sourcesContent":["var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles;","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread;","function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}\n\nmodule.exports = _taggedTemplateLiteral;","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","import {\r\n  gql\r\n} from \"@apollo/client\";\r\n\r\nexport const ADD_USER = gql `\r\n  mutation createUser($username: String!, $password: String!) {\r\n    createUser(input: { username: $username, password: $password }) {\r\n      ok\r\n      message\r\n      user {\r\n        username\r\n        id\r\n        password\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const LOGIN_USER = gql `\r\n  mutation tokenAuth($username: String!, $password: String!) {\r\n    tokenAuth(input: { username: $username, password: $password }) {\r\n      payload\r\n      token\r\n      refreshToken\r\n      user {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nexport const GET_POSTS = gql `\r\n  query posts($cursor: String) {\r\n    posts(first: 45, after: $cursor, orderBy: \"creation\") {\r\n      pageInfo {\r\n        endCursor\r\n        hasNextPage\r\n      }\r\n      edges {\r\n        node {\r\n          id\r\n          title\r\n          text\r\n          likers {\r\n            id\r\n          }\r\n          commentSet {\r\n            edges {\r\n              node {\r\n                id\r\n              }\r\n            }\r\n          }\r\n          creation\r\n          commentCount\r\n          user {\r\n            username\r\n            id\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_POST = gql `\r\n  query post($id: ID!, $cursor: String) {\r\n    posts(id: $id) {\r\n      edges {\r\n        node {\r\n          id\r\n          title\r\n          text\r\n          likers {\r\n            id\r\n          }\r\n          commentSet {\r\n            edges {\r\n              node {\r\n                id\r\n              }\r\n            }\r\n          }\r\n          creation\r\n          commentCount\r\n          user {\r\n            username\r\n            id\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    postComments(id: $id, after: $cursor) {\r\n      edges {\r\n        node {\r\n          id\r\n          user {\r\n            username\r\n            id\r\n          }\r\n          content\r\n          creation\r\n        }\r\n      }\r\n      pageInfo {\r\n        endCursor\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nexport const LIKED = gql `\r\n  query liked($post_id: ID!) {\r\n    liked(id: $post_id)\r\n  }\r\n`;\r\n\r\nexport const VERIFY_TOKEN = gql `\r\n  mutation verifyToken($token: String!) {\r\n    verifyToken(input: { token: $token }) {\r\n      payload\r\n    }\r\n  }\r\n`;\r\n\r\nexport const LOGOUT_USER = gql `\r\n  mutation {\r\n    deleteTokenCookie(input: {}) {\r\n      deleted\r\n    }\r\n  }\r\n`;\r\n\r\nexport const LIKE = gql `\r\n  mutation like($post_id: ID!) {\r\n    likePost(postId: $post_id) {\r\n      ok\r\n      post {\r\n        likers {\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CREATE_POST = gql `\r\n  mutation createPost($text: String!, $title: String!) {\r\n    createPost(input: { text: $text, title: $title }) {\r\n      ok\r\n      post {\r\n        id\r\n        title\r\n        text\r\n        likers {\r\n          id\r\n        }\r\n        commentSet {\r\n          edges {\r\n            node {\r\n              id\r\n            }\r\n          }\r\n        }\r\n        creation\r\n        commentCount\r\n        user {\r\n          username\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const REFRESH_TOKEN = gql `\r\n  mutation refreshToken($token: String!) {\r\n    refreshToken(input: { refreshToken: $token }) {\r\n      token\r\n      refreshToken\r\n    }\r\n  }\r\n`;\r\n\r\nexport const REVOKE_TOKEN = gql `\r\n  mutation revokeToken($token: String!) {\r\n    revokeToken(input: { refreshToken: $token }) {\r\n      revoked\r\n    }\r\n  }\r\n`;\r\n\r\nexport const SELF_USER = gql `\r\n  query self_user {\r\n    user {\r\n      id\r\n      username\r\n      posts {\r\n        edges {\r\n          node {\r\n            id\r\n          }\r\n        }\r\n      }\r\n      followers {\r\n        edges {\r\n          node {\r\n            id\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const SELF_POSTS = gql `\r\n  query self_posts($cursor: String) {\r\n    post(first: 20, orderBy: \"creation\", after: $cursor) {\r\n      edges {\r\n        node {\r\n          id\r\n          likers {\r\n            id\r\n          }\r\n          commentSet {\r\n            edges {\r\n              node {\r\n                id\r\n              }\r\n            }\r\n          }\r\n          text\r\n          title\r\n          creation\r\n        }\r\n      }\r\n      pageInfo {\r\n        hasNextPage\r\n        endCursor\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_USER = gql `\r\n  query get_user($id: ID!) {\r\n    userGet(id: $id) {\r\n      username\r\n      posts {\r\n        edges {\r\n          node {\r\n            id\r\n          }\r\n        }\r\n      }\r\n      followers {\r\n        edges {\r\n          node {\r\n            id\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    isFollowing(id: $id)\r\n  }\r\n`;\r\n\r\nexport const USER_POSTS = gql `\r\n  query user_posts($cursor: String, $id: ID!) {\r\n    userPost(first: 10, orderBy: \"creation\", after: $cursor, id: $id) {\r\n      edges {\r\n        node {\r\n          id\r\n          likers {\r\n            id\r\n          }\r\n          commentSet {\r\n            edges {\r\n              node {\r\n                id\r\n              }\r\n            }\r\n          }\r\n          text\r\n          title\r\n          creation\r\n        }\r\n      }\r\n      pageInfo {\r\n        hasNextPage\r\n        endCursor\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const FOLLOW = gql `\r\n  mutation followUser($id: ID!) {\r\n    followUser(id: $id) {\r\n      ok\r\n      user {\r\n        id\r\n        followers {\r\n          edges {\r\n            node {\r\n              id\r\n            }\r\n          }\r\n        }\r\n      }\r\n      message\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CREATE_COMMENT = gql `\r\n  mutation createComment($id: ID!, $comment: String!){\r\n    createComment(input: {\r\n      post: $id,\r\n      content: $comment\r\n    }) {\r\n      ok\r\n      comment {\r\n        id\r\n        user {\r\n          username\r\n          id\r\n        }\r\n        content\r\n        creation\r\n      }\r\n      __typename\r\n    }\r\n  }\r\n`;","import React, { useState, useContext, useEffect, lazy } from \"react\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { CREATE_POST, GET_POSTS } from \"../../Queries\";\r\nimport AlertContext from \"../../context/alert/AlertContext\";\r\nconst { Redirect } = lazy(() => import(\"react-router-dom\"));\r\n\r\nconst NewPost = () => {\r\n  const [state, setState] = useState({ title: \"\", content: \"\" });\r\n  const [disabled, setDisabled] = useState(true);\r\n  const [sent, setSent] = useState(false);\r\n  const [addPost] = useMutation(CREATE_POST);\r\n  const { setAlert, removeAlert } = useContext(AlertContext);\r\n\r\n  const onChange = (e) => {\r\n    let name = e.target.name;\r\n    setState({ ...state, [name]: e.target.value });\r\n    switch (name) {\r\n      case \"title\":\r\n        if (e.target.value.length < 1) {\r\n          setAlert(\"Title too short\", \"warning\");\r\n          setDisabled(true);\r\n        } else if (e.target.value.length > 260) {\r\n          setAlert(\"Title too long\", \"warning\");\r\n          setState({ ...state, title: state.title.substring(0, 260) });\r\n          setDisabled(true);\r\n        } else if (state.content.length > 0 && state.content.length <= 5500) {\r\n          removeAlert();\r\n          setDisabled(false);\r\n        }\r\n      case \"content\":\r\n        if (e.target.value.length < 1) {\r\n          setAlert(\"Content too short\", \"warning\");\r\n          setDisabled(true);\r\n        } else if (e.target.value.length > 5500) {\r\n          setAlert(\"Content too long\", \"warning\");\r\n          setState({ ...state, content: state.content.substring(0, 5500) });\r\n          setDisabled(true);\r\n        } else if (state.title.length > 0 && state.title.length <= 260) {\r\n          removeAlert();\r\n          setDisabled(false);\r\n        }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    removeAlert();\r\n  }, []);\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    addPost({\r\n      variables: { title: state.title, text: state.content },\r\n      update: (cache, { data }) => {\r\n        if (cache) {\r\n          let { posts } = cache.readQuery({ query: GET_POSTS });\r\n          console.log(posts);\r\n          const newData = {\r\n            ...posts,\r\n            edges: [\r\n              {\r\n                __typename: \"PostNodeEdge\",\r\n                node: data.createPost.post,\r\n              },\r\n              ...posts.edges,\r\n            ],\r\n          };\r\n          cache.writeQuery({\r\n            query: GET_POSTS,\r\n            data: {\r\n              posts: newData,\r\n            },\r\n          });\r\n        }\r\n      },\r\n    })\r\n      .catch((e) => console.log(e))\r\n      .then((data) => {\r\n        if (data) {\r\n          if (data !== null && data.data.createPost.ok) {\r\n            setAlert(\"Post Sent\", \"primary\");\r\n            setSent(true);\r\n          } else {\r\n            setAlert(\"Something went wrong\", \"warning\");\r\n          }\r\n        }\r\n      });\r\n  };\r\n\r\n  if (sent) return <Redirect to=\"/\" />;\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <form onSubmit={onSubmit} method=\"post\" className=\"form-auth\">\r\n        <div className=\"form-group\">\r\n          <label className=\"label-hide\" htmlFor=\"title\">\r\n            Title\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            name=\"title\"\r\n            placeholder=\"Title\"\r\n            aria-describedby=\"emailHelp\"\r\n            value={state.title}\r\n            onChange={onChange}\r\n            name=\"title\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"content\">Content</label>\r\n          <textarea\r\n            name=\"content\"\r\n            value={state.text}\r\n            className=\"form-control\"\r\n            name=\"content\"\r\n            rows=\"3\"\r\n            onChange={onChange}\r\n            id=\"content\"\r\n          ></textarea>\r\n        </div>\r\n        <button disabled={disabled} type=\"submit\" className=\"btn btn-teal\">\r\n          Submit\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewPost;\r\n"],"sourceRoot":""}