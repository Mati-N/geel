{"version":3,"sources":["webpack:///./src/components/pages/Notifications.js"],"names":["Offline","lazy","Link","Notifications","useQuery","GET_NOTIFICATIONS","loading","data","error","refetch","fetchMore","useState","className","size","style","margin","onClick","console","log","selfNotification","edges","map","node","category","key","id","to","sender","post"],"mappings":";;;;m0CAKA,IAAMA,EAAUC,gBAAK,kBAAM,gGACnBC,EAASD,gBAAK,kBAAM,yHAApBC,KA6FOC,UA3FO,WAAM,MAC2BC,mBACnDC,qBADMC,EADkB,EAClBA,QAASC,EADS,EACTA,KAAMC,EADG,EACHA,MAAkBC,GADf,EACIC,UADJ,EACeD,SADf,IAIFE,oBAAS,GAJP,aAM1B,GAAIL,IAAYC,EACd,OACE,yBAAKK,UAAU,WACb,kBAAC,iBAAD,CACEC,KAAM,GACNC,MAAO,CACLC,OAAQ,WAMlB,GAAIP,EACF,OACE,oCACE,kBAACR,EAAD,MACA,4BAAQY,UAAU,eAAeI,QAASP,GAA1C,YAiCN,OADAQ,QAAQC,IAAIX,GAEV,oCACGA,EAAKY,iBAAiBC,MAAMC,KAAI,YAAc,IAAXC,EAAW,EAAXA,KAEhC,OAAQA,EAAKC,UACX,IAAK,aACH,OACE,0BAAMC,IAAKF,EAAKG,GAAK,IACnB,kBAACvB,EAAD,CAAMwB,GAAE,eAAUJ,EAAKK,OAAOF,KAA9B,wBAEQ,IAHV,iBAOJ,IAAK,WACH,OACE,0BAAMD,IAAKF,EAAKG,GAAK,IACnB,kBAACvB,EAAD,CAAMwB,GAAE,eAAUJ,EAAKK,OAAOF,KAA9B,wBAEQ,IAHV,kBAIkB,IAChB,kBAACvB,EAAD,CAAMwB,GAAE,eAAUJ,EAAKM,KAAKH,KAA5B,oBAGN,IAAK,cACH,OAAO,0BAAMD,IAAKF,EAAKG,GAAK,IAArB","file":"20.main.js","sourcesContent":["import React, { useState, lazy } from \"react\";\r\nimport { GET_NOTIFICATIONS } from \"../../Queries\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { Waypoint } from \"react-waypoint\";\r\nimport { ImpulseSpinner as Spinner } from \"react-spinners-kit\";\r\nconst Offline = lazy(() => import(\"./Offline\"));\r\nconst { Link } = lazy(() => import(\"react-router-dom\"));\r\n\r\nconst Notifications = () => {\r\n  const { loading, data, error, fetchMore, refetch } = useQuery(\r\n    GET_NOTIFICATIONS\r\n  );\r\n  const [spin, setSpin] = useState(true);\r\n\r\n  if (loading || !data)\r\n    return (\r\n      <div className=\"spinner\">\r\n        <Spinner\r\n          size={50}\r\n          style={{\r\n            margin: \"auto\",\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n\r\n  if (error) {\r\n    return (\r\n      <>\r\n        <Offline />\r\n        <button className=\"btn btn-teal\" onClick={refetch}>\r\n          Refresh\r\n        </button>\r\n      </>\r\n    );\r\n  }\r\n\r\n  const more = () => {\r\n    fetchMore({\r\n      query: GET_POSTS,\r\n      variables: { cursor: data.posts.pageInfo.endCursor },\r\n      updateQuery: (previousResult, { fetchMoreResult }) => {\r\n        setSpin(true);\r\n        if (!previousResult.posts.pageInfo.hasNextPage) {\r\n          setSpin(false);\r\n          return previousResult;\r\n        }\r\n        const newEdges = fetchMoreResult.posts.edges;\r\n        const pageInfo = fetchMoreResult.posts.pageInfo;\r\n\r\n        return newEdges.length\r\n          ? {\r\n              posts: {\r\n                __typename: previousResult.posts.__typename,\r\n                edges: [...previousResult.posts.edges, ...newEdges],\r\n                pageInfo,\r\n              },\r\n            }\r\n          : previousResult;\r\n      },\r\n    });\r\n  };\r\n  console.log(data);\r\n  return (\r\n    <>\r\n      {data.selfNotification.edges.map(({ node }) => {\r\n        {\r\n          switch (node.category) {\r\n            case \"new_follow\":\r\n              return (\r\n                <span key={node.id + 90}>\r\n                  <Link to={`user/${node.sender.id}`}>\r\n                    node.sender.username\r\n                  </Link>{\" \"}\r\n                  Followed You!\r\n                </span>\r\n              );\r\n            case \"new_like\":\r\n              return (\r\n                <span key={node.id + 90}>\r\n                  <Link to={`user/${node.sender.id}`}>\r\n                    node.sender.username\r\n                  </Link>{\" \"}\r\n                  Liked your post{\" \"}\r\n                  <Link to={`post/${node.post.id}`}>node.post.title</Link>\r\n                </span>\r\n              );\r\n            case \"new_comment\":\r\n              return <span key={node.id + 90}>Cnew commment111!</span>;\r\n          }\r\n        }\r\n      })}\r\n      {/*<Waypoint onEnter={more}>\r\n        <div className=\"spinner\">{spin && <Spinner size={40} />}</div>\r\n  </Waypoint>*/}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Notifications;\r\n"],"sourceRoot":""}