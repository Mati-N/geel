{"version":3,"sources":["webpack:///./node_modules/@material-ui/icons/Markunread.js","webpack:///./src/components/layout/NotificationItem.js"],"names":["_interopRequireDefault","Object","defineProperty","exports","value","default","_react","_default","createElement","d","useStyles","makeStyles","theme","card","marginBottom","spacing","title","fontSize","pos","NotificationItem","node","classes","readNotif","useMutation","READ_NOTIFICATION","readFunc","variables","id","update","cache","readNotification","data","ok","writeFragment","fragment","gql","read","notification","timeSince","date","seconds","Math","floor","Date","interval","flr","category","fullWidth","className","root","variant","color","gutterBottom","component","to","sender","onClick","username","createdAt","size","startIcon","post","display","comment","paragraph","style","content","substr"],"mappings":"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","file":"20.main.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z\"\n}), 'Markunread');\n\nexports.default = _default;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { READ_NOTIFICATION } from \"../../Queries\";\r\nimport { gql, useMutation } from \"@apollo/client\";\r\nimport MarkunreadMailboxTwoToneIcon from \"@material-ui/icons/MarkunreadMailboxTwoTone\";\r\nimport MarkunreadIcon from \"@material-ui/icons/Markunread\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    marginBottom: theme.spacing(3),\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n}));\r\n\r\nconst NotificationItem = ({ node }) => {\r\n  const classes = useStyles();\r\n\r\n  const [readNotif] = useMutation(READ_NOTIFICATION);\r\n\r\n  const readFunc = () => {\r\n    readNotif({\r\n      variables: { id: node.id },\r\n      update: (cache, { data: { readNotification } }) => {\r\n        if (readNotification.ok) {\r\n          cache.writeFragment({\r\n            id: `NotificationNode:${node.id}`,\r\n            fragment: gql`\r\n              fragment Notification on NotificationNode {\r\n                read\r\n              }\r\n            `,\r\n            data: {\r\n              read: readNotification.notification.read,\r\n            },\r\n          });\r\n        }\r\n      },\r\n    });\r\n  };\r\n\r\n  const timeSince = (date) => {\r\n    let seconds = Math.floor((new Date() - date) / 1000);\r\n\r\n    let interval = seconds / 31536000;\r\n    if (interval > 1) {\r\n      const flr = Math.floor(interval);\r\n      return Math.floor(interval) + (flr === 1 ? \" year\" : \" years\");\r\n    }\r\n\r\n    interval = seconds / 2592000;\r\n    if (interval > 1) {\r\n      const flr = Math.floor(interval);\r\n      return flr + (flr === 1 ? \" month\" : \" months\");\r\n    }\r\n\r\n    interval = seconds / 86400;\r\n    if (interval > 1) {\r\n      const flr = Math.floor(interval);\r\n      return Math.floor(flr) + (flr === 1 ? \" day\" : \" days\");\r\n    }\r\n\r\n    interval = seconds / 3600;\r\n    if (interval > 1) {\r\n      const flr = Math.floor(interval);\r\n      return flr + (flr === 1 ? \" hour\" : \" hours\");\r\n    }\r\n\r\n    interval = seconds / 60;\r\n    if (interval > 1) {\r\n      const flr = Math.floor(interval);\r\n      return flr + (flr == 1 ? \" minute\" : \" minutes\");\r\n    }\r\n    return \"Seconds\";\r\n  };\r\n\r\n  switch (node.category) {\r\n    case \"new_follow\":\r\n      return (\r\n        <Card\r\n          fullWidth\r\n          className={node.read ? \"notification-read\" : \"None\"}\r\n          classes={{ root: classes.card }}\r\n          variant=\"outlined\"\r\n        >\r\n          <CardContent>\r\n            <Typography\r\n              className={classes.title}\r\n              color=\"textSecondary\"\r\n              gutterBottom\r\n            >\r\n              New Follow\r\n            </Typography>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n              <Link\r\n                to={`user/${node.sender.id}`}\r\n                onClick={() => {\r\n                  readFunc();\r\n                }}\r\n              >\r\n                {node.sender.username}\r\n              </Link>{\" \"}\r\n              Followed You{\" \"}\r\n            </Typography>\r\n            <Typography className={classes.pos} color=\"textSecondary\">\r\n              {timeSince(new Date(node.createdAt))} ago{\" \"}\r\n            </Typography>\r\n          </CardContent>\r\n          <CardActions>\r\n            <Button\r\n              size=\"small\"\r\n              onClick={() => {\r\n                readFunc();\r\n              }}\r\n              startIcon={\r\n                !node.read ? (\r\n                  <MarkunreadMailboxTwoToneIcon />\r\n                ) : (\r\n                  <MarkunreadIcon />\r\n                )\r\n              }\r\n            >\r\n              Mark {node.read && \"Un\"}Read\r\n            </Button>\r\n          </CardActions>\r\n        </Card>\r\n      );\r\n\r\n    case \"new_like\":\r\n      return (\r\n        <Card\r\n          fullWidth\r\n          className={node.read ? \"notification-read\" : \"None\"}\r\n          classes={{ root: classes.card }}\r\n          variant=\"outlined\"\r\n        >\r\n          <CardContent>\r\n            <Typography\r\n              className={classes.title}\r\n              color=\"textSecondary\"\r\n              gutterBottom\r\n            >\r\n              New Like\r\n            </Typography>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n              <Link\r\n                to={`user/${node.sender.id}`}\r\n                onClick={() => {\r\n                  readFunc();\r\n                }}\r\n              >\r\n                {node.sender.username}\r\n              </Link>{\" \"}\r\n              Liked your post\r\n            </Typography>\r\n            <Typography className={classes.pos} color=\"textSecondary\">\r\n              {timeSince(new Date(node.createdAt))} ago{\" \"}\r\n            </Typography>\r\n            <Typography variant=\"body2\" component=\"p\">\r\n              <Link\r\n                to={`/post/${node.post.id}`}\r\n                onClick={() => {\r\n                  readFunc();\r\n                }}\r\n              >\r\n                {node.post.title}\r\n              </Link>\r\n            </Typography>\r\n          </CardContent>\r\n          <CardActions>\r\n            <Button\r\n              size=\"small\"\r\n              onClick={() => {\r\n                readFunc();\r\n              }}\r\n              startIcon={\r\n                !node.read ? (\r\n                  <MarkunreadMailboxTwoToneIcon />\r\n                ) : (\r\n                  <MarkunreadIcon />\r\n                )\r\n              }\r\n            >\r\n              Mark {node.read && \"Un\"}Read\r\n            </Button>\r\n          </CardActions>\r\n        </Card>\r\n      );\r\n    case \"new_comment\":\r\n      return (\r\n        <Card\r\n          fullWidth\r\n          className={node.read ? \"notification-read\" : \"None\"}\r\n          classes={{ root: classes.card }}\r\n          variant=\"outlined\"\r\n        >\r\n          <CardContent>\r\n            <Typography\r\n              className={classes.title}\r\n              color=\"textSecondary\"\r\n              gutterBottom\r\n            >\r\n              New Comment\r\n            </Typography>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n              <Link\r\n                to={`user/${node.sender.id}`}\r\n                onClick={() => {\r\n                  readFunc();\r\n                }}\r\n              >\r\n                {node.sender.username}\r\n              </Link>{\" \"}\r\n              Commented on your post:{\" \"}\r\n              <Typography display=\"inline\">\r\n                <Link\r\n                  to={`/post/${node.comment.post.id}`}\r\n                  onClick={() => {\r\n                    readFunc();\r\n                  }}\r\n                  size={30}\r\n                >\r\n                  {node.comment.post.title}\r\n                </Link>\r\n              </Typography>\r\n            </Typography>\r\n\r\n            <Typography\r\n              className={classes.pos}\r\n              color=\"textSecondary\"\r\n              gutterBottom\r\n            >\r\n              {timeSince(new Date(node.createdAt))} ago{\" \"}\r\n            </Typography>\r\n            <Typography paragraph>\r\n              <Link\r\n                to={`/post/${node.comment.post.id}`}\r\n                onClick={() => {\r\n                  readFunc();\r\n                }}\r\n                color=\"grey\"\r\n                style=\"color: grey !important;\"\r\n              >\r\n                {node.comment.content.substr(0, 60)}\r\n              </Link>\r\n            </Typography>\r\n          </CardContent>\r\n          <CardActions>\r\n            <Button\r\n              size=\"small\"\r\n              onClick={() => {\r\n                readFunc();\r\n              }}\r\n              startIcon={\r\n                !node.read ? (\r\n                  <MarkunreadMailboxTwoToneIcon />\r\n                ) : (\r\n                  <MarkunreadIcon />\r\n                )\r\n              }\r\n            >\r\n              Mark {node.read && \"Un\"}Read\r\n            </Button>\r\n          </CardActions>\r\n        </Card>\r\n      );\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\nexport default NotificationItem;\r\n"],"sourceRoot":""}