{"version":3,"sources":["webpack:///./src/components/pages/Notifications.js"],"names":["Offline","lazy","Link","Home","useQuery","GET_NOTIFICATIONS","loading","data","error","refetch","fetchMore","useState","className","size","style","margin","onClick","console","log","selfNotifications","edges","map","node","category","sender","id","post"],"mappings":";;;;m0CAKA,IAAMA,EAAUC,gBAAK,kBAAM,gGACVA,gBAAK,kBAAM,yHAApBC,KAwFOC,UAtFf,WAAgB,MACuCC,mBACnDC,qBADMC,EADM,EACNA,QAASC,EADH,EACGA,KAAMC,EADT,EACSA,MAAkBC,GAD3B,EACgBC,UADhB,EAC2BD,SAD3B,IAIUE,oBAAS,GAJnB,GAMd,OANc,UAMVL,IAAYC,EAEZ,yBAAKK,UAAU,WACb,kBAAC,iBAAD,CACEC,KAAM,GACNC,MAAO,CACLC,OAAQ,WAMdP,EAEA,oCACE,kBAACR,EAAD,MACA,4BAAQY,UAAU,eAAeI,QAASP,GAA1C,aAgCNQ,QAAQC,IAAIX,GAEV,oCACGA,EAAKY,kBAAkBC,MAAMC,KAAI,YAAc,IAAXC,EAAW,EAAXA,KAEf,aAAlBA,EAAKC,UAEO,eAAUD,EAAKE,OAAOC,IAMhB,aAAlBH,EAAKC,WAEO,eAAUD,EAAKE,OAAOC,IAEtB,eAAUH,EAAKI,KAAKD,KAKhCH,EAAKC","file":"20.main.js","sourcesContent":["import React, { useState, lazy } from \"react\";\r\nimport { GET_NOTIFICATIONS } from \"../../Queries\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { Waypoint } from \"react-waypoint\";\r\nimport { ImpulseSpinner as Spinner } from \"react-spinners-kit\";\r\nconst Offline = lazy(() => import(\"./Offline\"));\r\nconst { Link } = lazy(() => import(\"react-router-dom\"));\r\n\r\nfunction Home() {\r\n  const { loading, data, error, fetchMore, refetch } = useQuery(\r\n    GET_NOTIFICATIONS\r\n  );\r\n  const [spin, setSpin] = useState(true);\r\n\r\n  if (loading || !data)\r\n    return (\r\n      <div className=\"spinner\">\r\n        <Spinner\r\n          size={50}\r\n          style={{\r\n            margin: \"auto\",\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n\r\n  if (error) {\r\n    return (\r\n      <>\r\n        <Offline />\r\n        <button className=\"btn btn-teal\" onClick={refetch}>\r\n          Refresh\r\n        </button>\r\n      </>\r\n    );\r\n  }\r\n\r\n  const more = () => {\r\n    fetchMore({\r\n      query: GET_POSTS,\r\n      variables: { cursor: data.posts.pageInfo.endCursor },\r\n      updateQuery: (previousResult, { fetchMoreResult }) => {\r\n        setSpin(true);\r\n        if (!previousResult.posts.pageInfo.hasNextPage) {\r\n          setSpin(false);\r\n          return previousResult;\r\n        }\r\n        const newEdges = fetchMoreResult.posts.edges;\r\n        const pageInfo = fetchMoreResult.posts.pageInfo;\r\n\r\n        return newEdges.length\r\n          ? {\r\n              posts: {\r\n                __typename: previousResult.posts.__typename,\r\n                edges: [...previousResult.posts.edges, ...newEdges],\r\n                pageInfo,\r\n              },\r\n            }\r\n          : previousResult;\r\n      },\r\n    });\r\n  };\r\n  console.log(data);\r\n  return (\r\n    <>\r\n      {data.selfNotifications.edges.map(({ node }) => {\r\n        {\r\n          node.category === \"new_post\" && (\r\n            <h1>\r\n              <Link to={`user/${node.sender.id}`}>node.sender.username</Link>{\" \"}\r\n              Followed You!\r\n            </h1>\r\n          );\r\n        }\r\n        {\r\n          node.category === \"new_like\" && (\r\n            <h1>\r\n              <Link to={`user/${node.sender.id}`}>node.sender.username</Link>{\" \"}\r\n              Liked your post{\" \"}\r\n              <Link to={`post/${node.post.id}`}>node.post.title</Link>\r\n            </h1>\r\n          );\r\n        }\r\n        {\r\n          node.category === \"new_comment\" && <h1>Cnew commment111!</h1>;\r\n        }\r\n      })}\r\n      {/*<Waypoint onEnter={more}>\r\n        <div className=\"spinner\">{spin && <Spinner size={40} />}</div>\r\n  </Waypoint>*/}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n"],"sourceRoot":""}