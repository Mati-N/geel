{"version":3,"sources":["webpack:///./src/components/layout/NotificationItem.js"],"names":["useStyles","makeStyles","theme","card","margin","spacing","title","fontSize","pos","marginBottom","NotificationItem","node","classes","readNotif","useMutation","READ_NOTIFICATION","timeSince","date","seconds","Math","floor","Date","interval","flr","category","fullWidth","className","read","root","variant","color","gutterBottom","component","to","sender","id","onClick","variables","username","createdAt","size","startIcon","post","display","comment","paragraph","style","content","substr"],"mappings":"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","file":"21.main.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { READ_NOTIFICATION } from \"../../Queries\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport MarkunreadMailboxTwoToneIcon from \"@material-ui/icons/MarkunreadMailboxTwoTone\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(6),\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n}));\r\n\r\nconst NotificationItem = ({ node }) => {\r\n  const classes = useStyles();\r\n\r\n  const [readNotif] = useMutation(READ_NOTIFICATION);\r\n\r\n  const timeSince = (date) => {\r\n    let seconds = Math.floor((new Date() - date) / 1000);\r\n\r\n    let interval = seconds / 31536000;\r\n    if (interval > 1) {\r\n      const flr = Math.floor(interval);\r\n      return Math.floor(interval) + (flr === 1 ? \" year\" : \" years\");\r\n    }\r\n\r\n    interval = seconds / 2592000;\r\n    if (interval > 1) {\r\n      const flr = Math.floor(interval);\r\n      return flr + (flr === 1 ? \" month\" : \" months\");\r\n    }\r\n\r\n    interval = seconds / 86400;\r\n    if (interval > 1) {\r\n      const flr = Math.floor(interval);\r\n      return Math.floor(flr) + (flr === 1 ? \" day\" : \" days\");\r\n    }\r\n\r\n    interval = seconds / 3600;\r\n    if (interval > 1) {\r\n      const flr = Math.floor(interval);\r\n      return flr + (flr === 1 ? \" hour\" : \" hours\");\r\n    }\r\n\r\n    interval = seconds / 60;\r\n    if (interval > 1) {\r\n      const flr = Math.floor(interval);\r\n      return flr + (flr == 1 ? \" minute\" : \" minutes\");\r\n    }\r\n    return \"Seconds\";\r\n  };\r\n\r\n  switch (node.category) {\r\n    case \"new_follow\":\r\n      return (\r\n        <Card\r\n          fullWidth\r\n          className={node.read ? \"notification-read\" : \"None\"}\r\n          classes={{ root: classes.card }}\r\n          variant=\"outlined\"\r\n        >\r\n          <CardContent>\r\n            <Typography\r\n              className={classes.title}\r\n              color=\"textSecondary\"\r\n              gutterBottom\r\n            >\r\n              New Follow\r\n            </Typography>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n              <Link\r\n                to={`user/${node.sender.id}`}\r\n                onClick={() =>\r\n                  node.read ? false : readNotif({ variables: { id: node.id } })\r\n                }\r\n              >\r\n                {node.sender.username}\r\n              </Link>{\" \"}\r\n              Followed You{\" \"}\r\n            </Typography>\r\n            <Typography className={classes.pos} color=\"textSecondary\">\r\n              {timeSince(new Date(node.createdAt))} ago{\" \"}\r\n            </Typography>\r\n          </CardContent>\r\n          <CardActions>\r\n            <Button\r\n              size=\"small\"\r\n              onClick={() =>\r\n                node.read ? false : readNotif({ variables: { id: node.id } })\r\n              }\r\n              startIcon={<MarkunreadMailboxTwoToneIcon />}\r\n            >\r\n              Mark Read\r\n            </Button>\r\n          </CardActions>\r\n        </Card>\r\n      );\r\n\r\n    case \"new_like\":\r\n      return (\r\n        <Card\r\n          fullWidth\r\n          className={node.read ? \"notification-read\" : \"None\"}\r\n          classes={{ root: classes.card }}\r\n          variant=\"outlined\"\r\n        >\r\n          <CardContent>\r\n            <Typography\r\n              className={classes.title}\r\n              color=\"textSecondary\"\r\n              gutterBottom\r\n            >\r\n              New Like\r\n            </Typography>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n              <Link\r\n                to={`user/${node.sender.id}`}\r\n                onClick={() =>\r\n                  node.read ? false : readNotif({ variables: { id: node.id } })\r\n                }\r\n              >\r\n                {node.sender.username}\r\n              </Link>{\" \"}\r\n              Liked your post\r\n            </Typography>\r\n            <Typography className={classes.pos} color=\"textSecondary\">\r\n              {timeSince(new Date(node.createdAt))} ago{\" \"}\r\n            </Typography>\r\n            <Typography variant=\"body2\" component=\"p\">\r\n              <Link\r\n                to={`/post/${node.post.id}`}\r\n                onClick={() =>\r\n                  node.read ? false : readNotif({ variables: { id: node.id } })\r\n                }\r\n              >\r\n                {node.post.title}\r\n              </Link>\r\n            </Typography>\r\n          </CardContent>\r\n          <CardActions>\r\n            <Button\r\n              size=\"small\"\r\n              onClick={() =>\r\n                node.read ? false : readNotif({ variables: { id: node.id } })\r\n              }\r\n              startIcon={<MarkunreadMailboxTwoToneIcon />}\r\n            >\r\n              Mark Read\r\n            </Button>\r\n          </CardActions>\r\n        </Card>\r\n      );\r\n    case \"new_comment\":\r\n      return (\r\n        <Card\r\n          fullWidth\r\n          className={node.read ? \"notification-read\" : \"None\"}\r\n          classes={{ root: classes.card }}\r\n          variant=\"outlined\"\r\n        >\r\n          <CardContent>\r\n            <Typography\r\n              className={classes.title}\r\n              color=\"textSecondary\"\r\n              gutterBottom\r\n            >\r\n              New Comment\r\n            </Typography>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n              <Link\r\n                to={`user/${node.sender.id}`}\r\n                onClick={() =>\r\n                  node.read ? false : readNotif({ variables: { id: node.id } })\r\n                }\r\n              >\r\n                {node.sender.username}\r\n              </Link>{\" \"}\r\n              Commented on your post:{\" \"}\r\n              <Typography display=\"inline\">\r\n                <Link\r\n                  to={`/post/${node.comment.post.id}`}\r\n                  onClick={() =>\r\n                    node.read\r\n                      ? false\r\n                      : readNotif({ variables: { id: node.id } })\r\n                  }\r\n                  size={30}\r\n                >\r\n                  {node.comment.post.title}\r\n                </Link>\r\n              </Typography>\r\n            </Typography>\r\n\r\n            <Typography\r\n              className={classes.pos}\r\n              color=\"textSecondary\"\r\n              gutterBottom\r\n            >\r\n              {timeSince(new Date(node.createdAt))} ago{\" \"}\r\n            </Typography>\r\n            <Typography paragraph>\r\n              <Link\r\n                to={`/post/${node.comment.post.id}`}\r\n                onClick={() =>\r\n                  node.read ? false : readNotif({ variables: { id: node.id } })\r\n                }\r\n                color=\"grey\"\r\n                style=\"color: grey !important;\"\r\n              >\r\n                {node.comment.content.substr(0, 60)}\r\n              </Link>\r\n            </Typography>\r\n          </CardContent>\r\n          <CardActions>\r\n            <Button\r\n              size=\"small\"\r\n              onClick={() =>\r\n                node.read ? false : readNotif({ variables: { id: node.id } })\r\n              }\r\n              startIcon={<MarkunreadMailboxTwoToneIcon />}\r\n            >\r\n              Mark Read\r\n            </Button>\r\n          </CardActions>\r\n        </Card>\r\n      );\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\nexport default NotificationItem;\r\n"],"sourceRoot":""}