{"version":3,"sources":["webpack:///./src/components/pages/Notifications.js"],"names":["Offline","lazy","Box","Notifications","useQuery","GET_NOTIFICATIONS","loading","data","error","fetchMore","refetch","useState","spin","setSpin","className","size","style","margin","onClick","selfNotification","edges","length","map","node","category","key","id","to","sender","username","post","title","comment","content","substr","onEnter","query","variables","cursor","pageInfo","endCursor","updateQuery","previousResult","fetchMoreResult","hasNextPage","newEdges","__typename"],"mappings":";;;;ivDAOA,IAAMA,EAAUC,gBAAK,kBAAM,gGACrBC,EAAMD,gBAAK,kBAAM,iGAqIRE,UAnIO,WAAM,MAC2BC,mBACnDC,qBADMC,EADkB,EAClBA,QAASC,EADS,EACTA,KAAMC,EADG,EACHA,MAAOC,EADJ,EACIA,UAAWC,EADf,EACeA,QADf,IAIFC,oBAAS,GAJP,GAInBC,EAJmB,KAIbC,EAJa,KAM1B,GAAIP,IAAYC,EACd,OACE,yBAAKO,UAAU,WACb,kBAAC,iBAAD,CACEC,KAAM,GACNC,MAAO,CACLC,OAAQ,WAMlB,GAAIT,EACF,OACE,oCACE,kBAACR,EAAD,MACA,4BAAQc,UAAU,eAAeI,QAASR,GAA1C,YAiCN,OACE,oCACyC,GAAtCH,EAAKY,iBAAiBC,MAAMC,QAC3B,yBAAKP,UAAU,oBACb,kBAACZ,EAAD,OAGHK,EAAKY,iBAAiBC,MAAME,KAAI,YAAc,I,MAAXC,EAAW,EAAXA,KAEhC,OAAQA,EAAKC,UACX,IAAK,aACH,OACE,yBAAKC,IAAKF,EAAKG,GAAIZ,UAAU,gBAC3B,kBAAC,OAAD,CAAMa,GAAE,eAAUJ,EAAKK,OAAOF,KAC3BH,EAAKK,OAAOC,UACP,IAHV,iBAOJ,IAAK,WACH,OACE,yBAAKJ,IAAKF,EAAKG,GAAIZ,UAAU,gBAC3B,kBAAC,OAAD,CAAMa,GAAE,eAAUJ,EAAKK,OAAOF,KAC3BH,EAAKK,OAAOC,UACP,IAHV,kBAIkB,IAChB,kBAAC,OAAD,CACEf,UAAU,oBACVa,GAAE,eAAUJ,EAAKO,KAAKJ,KAErBH,EAAKO,KAAKC,QAInB,IAAK,cACH,OACE,yBAAKN,IAAKF,EAAKG,GAAIZ,UAAU,gBAC3B,kBAAC,OAAD,CAAMa,GAAE,eAAUJ,EAAKK,OAAOF,KAC3BH,EAAKK,OAAOC,UACP,IAHV,2BAKE,kBAAC,Q,EAAD,CACEf,UAAU,oBACVa,GAAE,eAAUJ,EAAKS,QAAQF,KAAKJ,K,EACpB,6B,EAHZ,e,2FAKGH,EAAKS,QAAQF,KAAKC,OAVvB,IAaE,kBAAC,OAAD,CACEjB,UAAU,oBACVa,GAAE,eAAUJ,EAAKS,QAAQF,KAAKJ,GAA5B,aAAmCH,EAAKS,QAAQN,GAAhD,MAEDH,EAAKS,QAAQC,QAAQC,OAAO,EAAG,UAO9C,kBAAC,WAAD,CAAUC,QAtFD,WACX1B,EAAU,CACR2B,MAAO/B,oBACPgC,UAAW,CAAEC,OAAQ/B,EAAKY,iBAAiBoB,SAASC,WACpDC,YAAa,SAACC,EAAD,GAAyC,IAAtBC,EAAsB,EAAtBA,gBAE9B,GADA9B,GAAQ,IACH6B,EAAevB,iBAAiBoB,SAASK,YAE5C,OADA/B,GAAQ,GACD6B,EAET,IAAMG,EAAWF,EAAgBxB,iBAAiBC,MAC5CmB,EAAWI,EAAgBxB,iBAAiBoB,SAElD,OAAOM,EAASxB,OACZ,CACEF,iBAAkB,CAChB2B,WAAYJ,EAAevB,iBAAiB2B,WAC5C1B,MAAO,GAAF,SAAMsB,EAAevB,iBAAiBC,OAAtC,EAAgDyB,IACrDN,aAGJG,OAkEJ,yBAAK5B,UAAU,uBACb,4BAAQA,UAAU,eAAeI,QAAS,kBAAMR,MAAhD,WAGCE,GACC,yBAAKE,UAAU,WACb,kBAAC,iBAAD,CAASC,KAAM","file":"23.main.js","sourcesContent":["import React, { useState, lazy } from \"react\";\r\nimport { GET_NOTIFICATIONS } from \"../../Queries\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { Waypoint } from \"react-waypoint\";\r\nimport { ImpulseSpinner as Spinner } from \"react-spinners-kit\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Offline = lazy(() => import(\"./Offline\"));\r\nconst Box = lazy(() => import(\"../SVG/Box.svg\"));\r\n\r\nconst Notifications = () => {\r\n  const { loading, data, error, fetchMore, refetch } = useQuery(\r\n    GET_NOTIFICATIONS\r\n  );\r\n  const [spin, setSpin] = useState(true);\r\n\r\n  if (loading || !data)\r\n    return (\r\n      <div className=\"spinner\">\r\n        <Spinner\r\n          size={50}\r\n          style={{\r\n            margin: \"auto\",\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n\r\n  if (error) {\r\n    return (\r\n      <>\r\n        <Offline />\r\n        <button className=\"btn btn-teal\" onClick={refetch}>\r\n          Refresh\r\n        </button>\r\n      </>\r\n    );\r\n  }\r\n\r\n  const more = () => {\r\n    fetchMore({\r\n      query: GET_NOTIFICATIONS,\r\n      variables: { cursor: data.selfNotification.pageInfo.endCursor },\r\n      updateQuery: (previousResult, { fetchMoreResult }) => {\r\n        setSpin(true);\r\n        if (!previousResult.selfNotification.pageInfo.hasNextPage) {\r\n          setSpin(false);\r\n          return previousResult;\r\n        }\r\n        const newEdges = fetchMoreResult.selfNotification.edges;\r\n        const pageInfo = fetchMoreResult.selfNotification.pageInfo;\r\n\r\n        return newEdges.length\r\n          ? {\r\n              selfNotification: {\r\n                __typename: previousResult.selfNotification.__typename,\r\n                edges: [...previousResult.selfNotification.edges, ...newEdges],\r\n                pageInfo,\r\n              },\r\n            }\r\n          : previousResult;\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {data.selfNotification.edges.length == 0 && (\r\n        <div className=\"empty-box-holder\">\r\n          <Box />\r\n        </div>\r\n      )}\r\n      {data.selfNotification.edges.map(({ node }) => {\r\n        {\r\n          switch (node.category) {\r\n            case \"new_follow\":\r\n              return (\r\n                <div key={node.id} className=\"notification\">\r\n                  <Link to={`user/${node.sender.id}`}>\r\n                    {node.sender.username}\r\n                  </Link>{\" \"}\r\n                  Followed You!\r\n                </div>\r\n              );\r\n            case \"new_like\":\r\n              return (\r\n                <div key={node.id} className=\"notification\">\r\n                  <Link to={`user/${node.sender.id}`}>\r\n                    {node.sender.username}\r\n                  </Link>{\" \"}\r\n                  Liked your post{\" \"}\r\n                  <Link\r\n                    className=\"notification-post\"\r\n                    to={`post/${node.post.id}`}\r\n                  >\r\n                    {node.post.title}\r\n                  </Link>\r\n                </div>\r\n              );\r\n            case \"new_comment\":\r\n              return (\r\n                <div key={node.id} className=\"notification\">\r\n                  <Link to={`user/${node.sender.id}`}>\r\n                    {node.sender.username}\r\n                  </Link>{\" \"}\r\n                  Commented on your post \"\r\n                  <Link\r\n                    className=\"notification-post\"\r\n                    to={`post/${node.comment.post.id}`}\r\n                    className=\"notification-post-comment\"\r\n                  >\r\n                    {node.comment.post.title}\r\n                  </Link>\r\n                  \"\r\n                  <Link\r\n                    className=\"notification-post\"\r\n                    to={`post/${node.comment.post.id}/#${node.comment.id}c`}\r\n                  >\r\n                    {node.comment.content.substr(0, 60)}\r\n                  </Link>\r\n                </div>\r\n              );\r\n          }\r\n        }\r\n      })}\r\n      <Waypoint onEnter={more}>\r\n        <div className=\"refetch-and-spinner\">\r\n          <button className=\"btn btn-teal\" onClick={() => refetch()}>\r\n            Refetch\r\n          </button>\r\n          {spin && (\r\n            <div className=\"spinner\">\r\n              <Spinner size={40} />\r\n            </div>\r\n          )}\r\n        </div>\r\n      </Waypoint>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Notifications;\r\n"],"sourceRoot":""}